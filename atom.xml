<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dva,爱你哦～</title>
  
  <subtitle>Note Collections</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-02T02:13:41.190Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GouGou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/Codes/infront/js/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/Codes/infront/js/</id>
    <published>2020-03-02T02:09:09.042Z</published>
    <updated>2020-03-02T02:13:41.190Z</updated>
    
    <content type="html"><![CDATA[<p>===<br>title:JS<br>===</p><h3 id="anxios"><a href="#anxios" class="headerlink" title="anxios"></a>anxios</h3><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">http://www.axios-js.com/zh-cn/docs/</a></p><p>取消ajax请求<br><a href="https://blog.csdn.net/wopelo/article/details/79802585" target="_blank" rel="noopener">https://blog.csdn.net/wopelo/article/details/79802585</a><br><a href="https://blog.csdn.net/wopelo/article/details/79802585" target="_blank" rel="noopener">https://blog.csdn.net/wopelo/article/details/79802585</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;===&lt;br&gt;title:JS&lt;br&gt;===&lt;/p&gt;
&lt;h3 id=&quot;anxios&quot;&gt;&lt;a href=&quot;#anxios&quot; class=&quot;headerlink&quot; title=&quot;anxios&quot;&gt;&lt;/a&gt;anxios&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.axio
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="Codes" scheme="http://yoursite.com/categories/Note-Collections/Codes/"/>
    
      <category term="infront" scheme="http://yoursite.com/categories/Note-Collections/Codes/infront/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/Codes/infront/bootstrap/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/Codes/infront/bootstrap/</id>
    <published>2020-02-29T15:12:38.665Z</published>
    <updated>2020-02-29T15:45:59.896Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title：Bootstrap4"><a href="#title：Bootstrap4" class="headerlink" title="title：Bootstrap4"></a>title：Bootstrap4</h2><p>Bootstrap4<br><a href="http://code.z01.com/v4/" target="_blank" rel="noopener">http://code.z01.com/v4/</a><br>zico图标<br><a href="http://ico.z01.com/" target="_blank" rel="noopener">http://ico.z01.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title：Bootstrap4&quot;&gt;&lt;a href=&quot;#title：Bootstrap4&quot; class=&quot;headerlink&quot; title=&quot;title：Bootstrap4&quot;&gt;&lt;/a&gt;title：Bootstrap4&lt;/h2&gt;&lt;p&gt;Bootstrap
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="Codes" scheme="http://yoursite.com/categories/Note-Collections/Codes/"/>
    
      <category term="infront" scheme="http://yoursite.com/categories/Note-Collections/Codes/infront/"/>
    
    
  </entry>
  
  <entry>
    <title>Refences Log</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/References/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/References/</id>
    <published>2020-02-06T16:43:57.585Z</published>
    <updated>2020-02-26T10:25:40.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>ヒータ選定：<br><a href="https://jp.misumi-ec.com/vona2/detail/110300386860/" target="_blank" rel="noopener">https://jp.misumi-ec.com/vona2/detail/110300386860/</a><br><a href="https://www.kyocera.co.jp/prdct/fc/product/pdf/heaters.pdf" target="_blank" rel="noopener">https://www.kyocera.co.jp/prdct/fc/product/pdf/heaters.pdf</a><br><a href="https://www.kyocera.co.jp/prdct/fc/product/pdf/heaters.pdf" target="_blank" rel="noopener">https://www.kyocera.co.jp/prdct/fc/product/pdf/heaters.pdf</a><br><a href="https://jp.c.misumi-ec.com/book/MSM1_12/pdf/1683.pdf" target="_blank" rel="noopener">https://jp.c.misumi-ec.com/book/MSM1_12/pdf/1683.pdf</a></p><p>フォトカプラ特性トリガーLED電流<br><a href="https://toshiba-semicon-storage.com/content/dam/toshiba-ss/jp/docs/design-support/elearning/elearning_discrete05_r51.pdf" target="_blank" rel="noopener">https://toshiba-semicon-storage.com/content/dam/toshiba-ss/jp/docs/design-support/elearning/elearning_discrete05_r51.pdf</a></p><p>RTD白金抵抗体：<br><a href="http://www.ni.com/tutorial/7115/ja/" target="_blank" rel="noopener">http://www.ni.com/tutorial/7115/ja/</a><br><a href="http://www.ti.com/lit/an/sbaa275/sbaa275.pdf" target="_blank" rel="noopener">http://www.ti.com/lit/an/sbaa275/sbaa275.pdf</a></p><p>photodiode:<br><a href="https://ja.wikipedia.org/wiki/フォトダイオード" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/フォトダイオード</a><br><a href="https://ja.wikipedia.org/wiki/光起電力効果" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/光起電力効果</a></p><p>マイコン種類<br><a href="http://rtmrw.parallel.jp/led-work/raspberrypi/raspberrypi-1/doc-1.pdf" target="_blank" rel="noopener">http://rtmrw.parallel.jp/led-work/raspberrypi/raspberrypi-1/doc-1.pdf</a></p><h2 id="データーシート"><a href="#データーシート" class="headerlink" title="データーシート"></a>データーシート</h2><p>ヒータ：<br><a href="https://jp.misumi-ec.com/vona2/detail/110300386860/?bid=bid_basic_shape_template" target="_blank" rel="noopener">https://jp.misumi-ec.com/vona2/detail/110300386860/?bid=bid_basic_shape_template</a><br><a href="https://jp.c.misumi-ec.com/book/MSM1_12/pdf/1707.pdf" target="_blank" rel="noopener">https://jp.c.misumi-ec.com/book/MSM1_12/pdf/1707.pdf</a></p><p>フォトカプラ<br><a href="http://akizukidenshi.com/download/ds/toshiba/tlp241a.pdf" target="_blank" rel="noopener">http://akizukidenshi.com/download/ds/toshiba/tlp241a.pdf</a></p><p>PT1000:<br><a href="https://www.te.com/commerce/DocumentDelivery/DDEController?Action=showdoc&amp;DocId=Data+Sheet%7FPTF-FAMILY%7FA2%7Fpdf%7FEnglish%7FENG_DS_PTF-FAMILY_A2.pdf%7FNB-PTCO-168" target="_blank" rel="noopener">https://www.te.com/commerce/DocumentDelivery/DDEController?Action=showdoc&amp;DocId=Data+Sheet%7FPTF-FAMILY%7FA2%7Fpdf%7FEnglish%7FENG_DS_PTF-FAMILY_A2.pdf%7FNB-PTCO-168</a></p><p>UVLED<br><a href="https://www.tech-led.com/wp-content/uploads/2015/03/SPEC-XFVL-1H321.pdf" target="_blank" rel="noopener">https://www.tech-led.com/wp-content/uploads/2015/03/SPEC-XFVL-1H321.pdf</a></p><p>フォトダイオード<br><a href="https://www.kyosemi.co.jp/sensor/si_uv_sensor/kpdu400f_2/" target="_blank" rel="noopener">https://www.kyosemi.co.jp/sensor/si_uv_sensor/kpdu400f_2/</a></p><p>motor driver<br><a href="https://www.mouser.jp/datasheet/2/408/TA7291FG_datasheet_en_20070613-1132057.pdf" target="_blank" rel="noopener">https://www.mouser.jp/datasheet/2/408/TA7291FG_datasheet_en_20070613-1132057.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;p&gt;ヒータ選定：&lt;br&gt;&lt;a href=&quot;https://jp.misumi-ec.com/vona2/detail/11030
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>绘图</title>
    <link href="http://yoursite.com/wiki/Note%20Collections/%E7%BB%98%E5%9B%BE/%E7%BB%98%E5%9B%BE/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/%E7%BB%98%E5%9B%BE/%E7%BB%98%E5%9B%BE/</id>
    <published>2020-01-23T13:02:13.670Z</published>
    <updated>2020-01-23T13:54:27.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><h4 id="卡扣"><a href="#卡扣" class="headerlink" title="卡扣"></a>卡扣</h4><p><img src="/assets/1/20171218-18e1732b.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;绘图&quot;&gt;&lt;a href=&quot;#绘图&quot; class=&quot;headerlink&quot; title=&quot;绘图&quot;&gt;&lt;/a&gt;绘图&lt;/h2&gt;&lt;h4 id=&quot;卡扣&quot;&gt;&lt;a href=&quot;#卡扣&quot; class=&quot;headerlink&quot; title=&quot;卡扣&quot;&gt;&lt;/a&gt;卡扣&lt;/h4&gt;&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="绘图" scheme="http://yoursite.com/categories/Note-Collections/%E7%BB%98%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>Note Collections：Dva,爱你哦~</title>
    <link href="http://yoursite.com/wiki/Note%20Collections/Codes/index/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/Codes/index/</id>
    <published>2020-01-16T20:21:19.325Z</published>
    <updated>2020-02-26T10:35:54.320Z</updated>
    
    <content type="html"><![CDATA[<p>本站地址：– <a href="https://lovedva.github.io" target="_blank" rel="noopener">https://lovedva.github.io</a>　<br>托管于github上，国内部分地区可能访问缓慢或者无法访问,请访问coding<br>话说这个Live2D的小人点它居然会说话♂</p><p><img src="https://raw.githubusercontent.com/lovedva/pic404/master/dva.jpeg" alt=""></p><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志:"></a>更新日志:</h3><p>2020.1.23 搬家完成，添加基础评论<br>2019.2.6 Dva，爱你哦~<br>2018.7.13　不知道怎么弄评论，蓝瘦，香菇</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本站地址：– &lt;a href=&quot;https://lovedva.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://lovedva.github.io&lt;/a&gt;　&lt;br&gt;托管于github上，国内部分地区可能访问缓慢或者无法访问
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="Codes" scheme="http://yoursite.com/categories/Note-Collections/Codes/"/>
    
    
  </entry>
  
  <entry>
    <title>RasPi Leaf 印刷用</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/RasPi%20Leaf%20%E5%8D%B0%E5%88%B7%E7%94%A8/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/RasPi%20Leaf%20%E5%8D%B0%E5%88%B7%E7%94%A8/</id>
    <published>2020-01-06T07:50:10.712Z</published>
    <updated>2020-01-23T13:49:38.975Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="RasPi-Leaf-印刷用"><a href="#RasPi-Leaf-印刷用" class="headerlink" title="RasPi Leaf 印刷用"></a>RasPi Leaf 印刷用</h2><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p><img src="/assets/2/20171107-29b58e98.png" alt=""> <img src="/assets/2/20171107-403ca5e6.png" alt="">    </p><h3 id="ダウンロード-リンク"><a href="#ダウンロード-リンク" class="headerlink" title="ダウンロード リンク"></a>ダウンロード リンク</h3><p><a href="https://github.com/splitbrain/rpibplusleaf/blob/master/rpiblusleaf.pdf" target="_blank" rel="noopener">https://github.com/splitbrain/rpibplusleaf/blob/master/rpiblusleaf.pdf</a></p><h5 id="References-参考文献："><a href="#References-参考文献：" class="headerlink" title="References　参考文献："></a>References　参考文献：</h5><p><a href="http://www.doctormonk.com/2013/02/raspberry-pi-and-breadboard-raspberry.html" target="_blank" rel="noopener">http://www.doctormonk.com/2013/02/raspberry-pi-and-breadboard-raspberry.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;RasPi-Leaf-印刷用&quot;&gt;&lt;a href=&quot;#RasPi-Leaf-印刷用&quot; class=&quot;headerlink&quot; title=&quot;RasPi Leaf 印刷用&quot;&gt;&lt;/a&gt;RasPi Leaf 印刷用&lt;/h2&gt;&lt;h3 id=&quot;使い方&quot;
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>プロキシー設定</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%83%BC%E8%A8%AD%E5%AE%9A/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%83%BC%E8%A8%AD%E5%AE%9A/</id>
    <published>2020-01-06T07:50:10.712Z</published>
    <updated>2020-01-23T13:42:13.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="プロキシー設定"><a href="#プロキシー設定" class="headerlink" title="プロキシー設定"></a>プロキシー設定</h2><h4 id="1-次のコマンドを使って「-etc-apt-apt-conf-d-」ディレクトリに入る"><a href="#1-次のコマンドを使って「-etc-apt-apt-conf-d-」ディレクトリに入る" class="headerlink" title="1.次のコマンドを使って「/etc/apt/apt.conf.d/」ディレクトリに入る"></a>1.次のコマンドを使って「/etc/apt/apt.conf.d/」ディレクトリに入る</h4><p><code>cd /etc/apt/apt.conf.d/</code></p><h4 id="2-「10proxy」という名前のファイルを作る"><a href="#2-「10proxy」という名前のファイルを作る" class="headerlink" title="2.「10proxy」という名前のファイルを作る"></a>2.「10proxy」という名前のファイルを作る</h4><p>nanoプログラムを利用して、次のコマンドでファイルを作る。</p><p><code>sudo nano /etc/apt/apt.conf.d/10proxy</code></p><h4 id="3-プロキシーの設定を入力する"><a href="#3-プロキシーの設定を入力する" class="headerlink" title="3.プロキシーの設定を入力する"></a>3.プロキシーの設定を入力する</h4><p>プロキシーの設定テキストを”10proxy”ファイルに入れる。</p><p><code>Acquire::http::Proxy &quot;http://202.18.172.35:80&quot;;</code></p><h4 id="4-ファイルを保存する"><a href="#4-ファイルを保存する" class="headerlink" title="4.ファイルを保存する"></a>4.ファイルを保存する</h4><p>「Crl」キーと「O」キーを同時に押し、ファイル名を確認して「Enter」キーで保存する。<br>「Crl」キーと「X」キーを同時に押してnanoを終了、ターミナルに戻る。</p><h4 id="5-RaspberryPiを再起動する"><a href="#5-RaspberryPiを再起動する" class="headerlink" title="5.RaspberryPiを再起動する"></a>5.RaspberryPiを再起動する</h4><h2 id="再起動でプロキシーの設定を有効させる。"><a href="#再起動でプロキシーの設定を有効させる。" class="headerlink" title="再起動でプロキシーの設定を有効させる。"></a>再起動でプロキシーの設定を有効させる。</h2><h5 id="References-参考文献："><a href="#References-参考文献：" class="headerlink" title="References　参考文献："></a>References　参考文献：</h5><p><a href="http://mrchrisjbailey.co.uk/2013/03/19/connecting-raspberry-pi-through-school-proxy/" target="_blank" rel="noopener">http://mrchrisjbailey.co.uk/2013/03/19/connecting-raspberry-pi-through-school-proxy/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;プロキシー設定&quot;&gt;&lt;a href=&quot;#プロキシー設定&quot; class=&quot;headerlink&quot; title=&quot;プロキシー設定&quot;&gt;&lt;/a&gt;プロキシー設定&lt;/h2&gt;&lt;h4 id=&quot;1-次のコマンドを使って「-etc-apt-apt-conf-d-」ディレクトリに入る&quot;&gt;
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>リモート操作</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E6%93%8D%E4%BD%9C/</id>
    <published>2020-01-06T07:50:10.712Z</published>
    <updated>2020-01-23T13:49:41.322Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="リモート操作"><a href="#リモート操作" class="headerlink" title="リモート操作"></a>リモート操作</h2><h3 id="リモート操作の初期設定"><a href="#リモート操作の初期設定" class="headerlink" title="リモート操作の初期設定"></a>リモート操作の初期設定</h3><p>…</p><h3 id="LANケーブルでつなぐ場合"><a href="#LANケーブルでつなぐ場合" class="headerlink" title="LANケーブルでつなぐ場合"></a>LANケーブルでつなぐ場合</h3><h4 id="1-RaspberryPiのLANポートとパソコンのLANポートをLANケーブルでつなぐ。"><a href="#1-RaspberryPiのLANポートとパソコンのLANポートをLANケーブルでつなぐ。" class="headerlink" title="1.RaspberryPiのLANポートとパソコンのLANポートをLANケーブルでつなぐ。"></a>1.RaspberryPiのLANポートとパソコンのLANポートをLANケーブルでつなぐ。</h4><h4 id="2-Raspiの電源を入れ、起動完了までまつ。"><a href="#2-Raspiの電源を入れ、起動完了までまつ。" class="headerlink" title="2.Raspiの電源を入れ、起動完了までまつ。"></a>2.Raspiの電源を入れ、起動完了までまつ。</h4><h4 id="3-パソコンのターミナルを起動する。"><a href="#3-パソコンのターミナルを起動する。" class="headerlink" title="3.パソコンのターミナルを起動する。"></a>3.パソコンのターミナルを起動する。</h4><p>プログラムとファイル検索で「cmd」を検索して、「cmd」を起動する。<br><img src="/assets/2/20171108-144b1ead.png" width="30%"></p><h4 id="4-以下のコマンドを使って、RasPiのIPアドレスを探す。"><a href="#4-以下のコマンドを使って、RasPiのIPアドレスを探す。" class="headerlink" title="4.以下のコマンドを使って、RasPiのIPアドレスを探す。"></a>4.以下のコマンドを使って、RasPiのIPアドレスを探す。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="/assets/2/20171108-6cb4127e.png" alt="">  </p><h4 id="5-SSHクライアントで、RasPiのIPを入れる"><a href="#5-SSHクライアントで、RasPiのIPを入れる" class="headerlink" title="5.SSHクライアントで、RasPiのIPを入れる"></a>5.SSHクライアントで、RasPiのIPを入れる</h4><p>IPを入れたら「Connect」をクリックする。<br><img src="/assets/2/20171108-86226cbe.png" width="40%" ></p><h4 id="6-RasPiのユーザネームとパスワードでログインする"><a href="#6-RasPiのユーザネームとパスワードでログインする" class="headerlink" title="6.RasPiのユーザネームとパスワードでログインする"></a>6.RasPiのユーザネームとパスワードでログインする</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Username:pi</span><br><span class="line">Password:raspberry</span><br></pre></td></tr></table></figure><h4 id="7-VNCサーバーを起動する"><a href="#7-VNCサーバーを起動する" class="headerlink" title="7.VNCサーバーを起動する"></a>7.VNCサーバーを起動する</h4><p>最新のバージョンのRasbianでは，VNCServerがすでにインストールされたので，次のコマンドでVNCサーバーを起動,ユーザー名はpiで,パスワード(raspberry)を入力してOK。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vncserver :1</span><br></pre></td></tr></table></figure><p><img src="/assets/2/20171108-04b84f72.png" alt="">  </p><h4 id="8-パソコンのVNCクライアントでRasPiのデスクトップに入る"><a href="#8-パソコンのVNCクライアントでRasPiのデスクトップに入る" class="headerlink" title="8.パソコンのVNCクライアントでRasPiのデスクトップに入る"></a>8.パソコンのVNCクライアントでRasPiのデスクトップに入る</h4><p>VNCクライアントを起動する。<br><img src="/assets/2/20171108-77f1b830.png" alt="">  </p><p>[RasPiのIPアドレス]:1を入れて、「Connect」をクリックする。<br><img src="/assets/2/20171108-7ce3412a.png" alt="">  </p><p>設定されたVNCサーバのパスワードを使ってRasPiのデスクトップに入る。<br><img src="/assets/2/20171108-7ae9e549.png" alt="">  </p><p>完了。RasPiの電源を切ると、1から8までを繰り返し、リモート操作が再開される。<br><IMG src="/assets/2/20171108-917f60a8.png" width="60%" ></p><h3 id="WIFIでつなぐ場合"><a href="#WIFIでつなぐ場合" class="headerlink" title="WIFIでつなぐ場合"></a>WIFIでつなぐ場合</h3><p>…</p><h2 id="IPアドレスを固定する"><a href="#IPアドレスを固定する" class="headerlink" title="IPアドレスを固定する"></a>IPアドレスを固定する</h2><h3 id="IPアドレスを固定する-1"><a href="#IPアドレスを固定する-1" class="headerlink" title="IPアドレスを固定する"></a>IPアドレスを固定する</h3><p>1.RasPiのSDカードをパソコンに差し込んで，ルートディレクトリを開いて，「cmdline.txt 」というファイルを編集する。  </p><p>2．一番前のところでIPアドレスの設定を追加する。<br><img src="/assets/2/20171113-ce7599ed.png" alt="">  </p><p><strong>パソコンがルータとして使われている場合，RasPiのIPアドレスを固定するには，パソコンのネットワークセグメントと同じIPアドレスにする必要がある。</strong><br>例えば,  次のコマンドでIP検索を行う。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p>ここで、「169.254.54.6」はパソコンのIPアドレスである。<br><img src="/assets/2/20171113-a74ee826.png" width="500" >  </p><p>そして、「160.254.190.109」はRasPiのIPアドレスである。<br><img src="/assets/2/20171113-4c36ae10.png" alt="">  </p><p>パソコンと同じネットワークセグメントと言うのは、IPアドレスは「160.254.xxx.xxx」になること。<br>この場合では、メモ帳ファイルの一番前に入れるテキストは  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip&#x3D;160.254.190.100</span><br></pre></td></tr></table></figure><p>であれば、RasPiのIPアドレスは「160.254.190.100」に固定する。<br>他のルータを使う場合は、このようにルータのネットワークセグメントと同じにするように設定してください。</p><h3 id="ファイル転送"><a href="#ファイル転送" class="headerlink" title="ファイル転送"></a>ファイル転送</h3><p>1.WinSCPをインストールする<br>説明：<a href="https://winscp.net/eng/docs/lang:jp" target="_blank" rel="noopener">https://winscp.net/eng/docs/lang:jp</a><br>ダウンロード：<a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">https://winscp.net/eng/download.php</a></p><p>2.SSHでログインする<br><img src="/assets/2/20171212-6dd5bfea.png" alt=""></p><p>3.ファイルを編集･新規する<br>「デスクトップ」をダブルクリックして,デスクトップに入る.<br><img src="/assets/2/20171212-ce8c1ba5.png" alt="">  </p><p>ファイルを選択し,右クリックして,ファイルを編集する.<br><img src="/assets/2/20171212-501f6e61.png" alt="">  </p><p>ファイルあるいはフォルダー（ディレクトリ）を新規する.<br><img src="/assets/2/20171212-9c47d6bd.png" alt="">  </p><p>ファイルを転送する.<br><img src="/assets/2/20180525-e67902c8.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;リモート操作&quot;&gt;&lt;a href=&quot;#リモート操作&quot; class=&quot;headerlink&quot; title=&quot;リモート操作&quot;&gt;&lt;/a&gt;リモート操作&lt;/h2&gt;&lt;h3 id=&quot;リモート操作の初期設定&quot;&gt;&lt;a href=&quot;#リモート操作の初期設定&quot; 
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>Install OS</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/Install%20OS/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/Install%20OS/</id>
    <published>2020-01-06T07:50:10.711Z</published>
    <updated>2020-01-23T13:49:36.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Install-OS"><a href="#Install-OS" class="headerlink" title="Install OS"></a>Install OS</h2><p>2017.10.26  </p><h3 id="1-公式サイトでOSファイルをダウンロードする"><a href="#1-公式サイトでOSファイルをダウンロードする" class="headerlink" title="#1 公式サイトでOSファイルをダウンロードする"></a>#1 公式サイトでOSファイルをダウンロードする</h3><p>デスクトップ付けのZIPフィルをダウンロードする：<br><a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/raspbian/</a><br><img src="/assets/2/20171026-8d0ba183.png" alt="">   </p><p>7-Zip（圧縮・解凍ソフト）Download：<br><a href="https://sevenzip.osdn.jp/" target="_blank" rel="noopener">https://sevenzip.osdn.jp/</a></p><h3 id="2-Win32-Disk-Imagerをインストールする"><a href="#2-Win32-Disk-Imagerをインストールする" class="headerlink" title="#2 Win32 Disk Imagerをインストールする"></a>#2 Win32 Disk Imagerをインストールする</h3><p>Win32 Disk Imager[^1] このプログラムは、RAWディスクイメージをリムーバブルデバイスに書き込むか、もしくはリムーバブルデバイスをRAWイメージディスクにバックアップすることに設計されています。  </p><p>Download：<br><a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">https://sourceforge.net/projects/win32diskimager/</a></p><h3 id="3-OSファイルをSDカードに書き込む"><a href="#3-OSファイルをSDカードに書き込む" class="headerlink" title="#3 OSファイルをSDカードに書き込む"></a>#3 OSファイルをSDカードに書き込む</h3><h5 id="1-ZIPファイルを解凍する"><a href="#1-ZIPファイルを解凍する" class="headerlink" title="1.ZIPファイルを解凍する"></a>1.ZIPファイルを解凍する</h5><p>解凍ソフトがない場合は「7-Zip」をインストールしてください。<br>ZIPファイルを解凍して、OSのディスクイメージファイル[^2]（IMGファイル）を得る。<br><img src="/assets/2/20171026-15b75cf2.png" alt="">  </p><h5 id="2-OSファイルをSDカードに書き込む"><a href="#2-OSファイルをSDカードに書き込む" class="headerlink" title="2.OSファイルをSDカードに書き込む"></a>2.OSファイルをSDカードに書き込む</h5><p>Win32 Disk Imagerを使ってイメージファイルを書き込む。<br><img src="/assets/2/20171101-f3539aac.png" alt="">　　</p><p>イメージファイルとSDカードのドライブを選択して、「Write」をクリックすると書き込みが開始される。<br><img src="/assets/2/20171101-c5219866.png" alt=""><br>書き込みが終わったら、OSのインストールが完了する。</p><p>[^1]:Win32 Disk Imagerの説明： <a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="noopener">https://ja.osdn.net/projects/sfnet_win32diskimager/</a><br>[^2]:イメージファイルとは　 <a href="https://www.gigafree.net/faq/word/imgfile.html" target="_blank" rel="noopener">https://www.gigafree.net/faq/word/imgfile.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Install-OS&quot;&gt;&lt;a href=&quot;#Install-OS&quot; class=&quot;headerlink&quot; title=&quot;Install OS&quot;&gt;&lt;/a&gt;Install OS&lt;/h2&gt;&lt;p&gt;2017.10.26  &lt;/p&gt;
&lt;h3 id=&quot;1-公式サイトでOSファイ
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>初期設定</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/</id>
    <published>2020-01-06T07:50:10.711Z</published>
    <updated>2020-01-23T13:49:37.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h2><p>RaspberryPiにUSBケーブルを使って電源と接続すると、起動が開始される。電源が入っている場合は、赤いランプが点灯する。</p><h3 id="言語設定"><a href="#言語設定" class="headerlink" title="# 言語設定"></a># 言語設定</h3><p>1.ラズベリーパイのアイコン（メニュー）をクリックして＞Preferences＞Raspberry Pi Configurationを選択すると、設定ツールを起動する。<br><img src="/assets/2/20171102-bd138955.png" alt=""><br><img src="/assets/2/20171102-7625372c.png" alt="">  </p><p>2.Localisationタブに入って、Set　Localeをクリックする。ここで、日本語に設定する。<br><img src="/assets/2/20171102-f06792e7.png" alt="">    </p><p>3.タイムゾーンをTokyoに設定する。Set Timezoneをクリックする。<br><img src="/assets/2/20171102-65994499.png" alt="">  </p><p>4.日本語キーボードを使ってる場合は、キーボード配列を日本語に変更する。Set Keyboardをクリックする。<br>CountryをJanpan、VariantをJapaneseを設定する。  </p><p>5.無線LANの利用場所をJP Japanに設定する。Set Wifi Countryをクリックして、JP Japanを選択する。<br><img src="/assets/2/20171102-ce1ff563.png" alt="">  </p><p>6.全ての設定が終わったら、OKをクリックすして、RaspberryPiを再起動する。ここで、OKをクリックする。<br><img src="/assets/2/20171102-3c375408.png" alt="">  </p><p>再起動が完了するまで待つ。  </p><h3 id="＃インターネットに接続する"><a href="#＃インターネットに接続する" class="headerlink" title="＃インターネットに接続する"></a>＃インターネットに接続する</h3><h4 id="LANの場合"><a href="#LANの場合" class="headerlink" title="LANの場合"></a>LANの場合</h4><p>LANケーブルをRaspberryPiに入れる。</p><h4 id="無線LANの場合"><a href="#無線LANの場合" class="headerlink" title="無線LANの場合"></a>無線LANの場合</h4><p>1.右上のネットワークアイコンをクリックする。<br><img src="/assets/2/20171113-d7d31d3e.png" alt="">  </p><p>2.パスワードを入力する。<br><img src="/assets/2/20171113-948cf839.png" alt="">  </p><h3 id="最新状態に更新する"><a href="#最新状態に更新する" class="headerlink" title="最新状態に更新する"></a>最新状態に更新する</h3><p><strong>プロキシーが要る場合は先に<a href="https://syjsxxjy.github.io/myblog/index.html?file=2-RaspberryPi/02-Raspberry%20Pi%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A/03-%EF%BC%83%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A" target="_blank" rel="noopener">#プロクシーを設定</a>してください</strong>  </p><p>1.ターミナルアイコンをクリックして、ターミナルを起動する。<br><img src="/assets/2/20171107-561766f0.png" alt="">  </p><p>2.「sudo」コマンドで管理者権限になり、「apt」コマンドで「update」サブコマンドを実行して、サーバー上のパッケージを取得する。<br><img src="/assets/2/20171113-0c9addb0.png" alt="">  </p><p>=======</p><h3 id="日本語フォントをインストールする"><a href="#日本語フォントをインストールする" class="headerlink" title="# 日本語フォントをインストールする"></a># 日本語フォントをインストールする</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fonts-ipafont fonts-ipaexfont fonts-takao</span><br></pre></td></tr></table></figure><p>確認を求められたら,「Y」を入力してインストールする.　　<br>インストールが終わったら、再起動する。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;初期設定&quot;&gt;&lt;a href=&quot;#初期設定&quot; class=&quot;headerlink&quot; title=&quot;初期設定&quot;&gt;&lt;/a&gt;初期設定&lt;/h2&gt;&lt;p&gt;RaspberryPiにUSBケーブルを使って電源と接続すると、起動が開始される。電源が入っている場合は、赤いランプが点灯す
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title>専門用語の説明</title>
    <link href="http://yoursite.com/wiki/Raspberry_Pi_PCR/%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AE%E8%AA%AC%E6%98%8E/"/>
    <id>http://yoursite.com/wiki/Raspberry_Pi_PCR/%E5%B0%82%E9%96%80%E7%94%A8%E8%AA%9E%E3%81%AE%E8%AA%AC%E6%98%8E/</id>
    <published>2020-01-06T07:50:10.710Z</published>
    <updated>2020-01-23T13:49:35.376Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="専門用語の説明"><a href="#専門用語の説明" class="headerlink" title="専門用語の説明"></a>専門用語の説明</h2><h3 id="Win32-Disk-Imager"><a href="#Win32-Disk-Imager" class="headerlink" title="Win32 Disk Imager"></a>Win32 Disk Imager</h3><p> <a href="https://ja.osdn.net/projects/sfnet_win32diskimager/" target="_blank" rel="noopener">https://ja.osdn.net/projects/sfnet_win32diskimager/</a><br> このプログラムは、RAWディスクイメージをリムーバブルデバイスに書き込むか、もしくはリムーバブルデバイスをRAWイメージディスクにバックアップすることに設計されています。これはAndroidやUbuntu on ArmといったArm用の組込み開発にとって非常に有用です。誰もがプロジェクトを分機し、改変することもできます。パッチはいつも歓迎です。</p><h3 id="イメージファイル（IMG拡張子）"><a href="#イメージファイル（IMG拡張子）" class="headerlink" title="イメージファイル（IMG拡張子）"></a>イメージファイル（IMG拡張子）</h3><p><a href="https://www.gigafree.net/faq/word/imgfile.html" target="_blank" rel="noopener">https://www.gigafree.net/faq/word/imgfile.html</a><br>イメージファイル（イメージ）とは、簡単に言うと<br>ディスクの中身を、一つにまとめたファイル（ ＝ ディスクそのもの）<br>のことです<br>（「イメージファイル」「イメージ」「ディスクイメージ」などは、全て同じ意味）<br>CD / DVD / BD / ハードディスク 等の中身を、 “ そっくりそのまま ” 取り出したような感じのファイルで、中身は元のディスクと “ 全く ” 同じです。<br>「そっくりそのまま」の形式なので、<br>劣化なくバックアップしたい<br>完全な形でバックアップしたい<br>品質を損なわずにバックアップしたい<br>という時に最適なフォーマットなのです。<br>（圧縮されている訳ではないので、ファイルサイズは元のディスクと同じになります）<br>そのイメージファイルの標準規格 が「ISO」であり、「ISO」イメージファイルは “ 様々なOS 上で読み込むことができる ” という特徴を持っています1。</p><h3 id="ディレクトリ"><a href="#ディレクトリ" class="headerlink" title="ディレクトリ"></a>ディレクトリ</h3><p><a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA</a><br>ディレクトリ (英: directory) は、コンピュータのファイルシステムにおいて、ファイルをグループ化するための特殊なファイルで、整理・管理などの目的で活用される。ディレクトリの中にも、通常のファイルだけでなく入れ子的にディレクトリを作って、任意の階層を持たせて管理できることがほとんどである。初心者向けの解説書などではファイルの入れ物（容器）などと表現されることもある（ただし、実際には、入れ物（容器）であるのはメディアそのものであって、ディレクトリは「ファイルへの見出しの入れ物」である）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;専門用語の説明&quot;&gt;&lt;a href=&quot;#専門用語の説明&quot; class=&quot;headerlink&quot; title=&quot;専門用語の説明&quot;&gt;&lt;/a&gt;専門用語の説明&lt;/h2&gt;&lt;h3 id=&quot;Win32-Disk-Imager&quot;&gt;&lt;a href=&quot;#Win
      
    
    </summary>
    
    
      <category term="Raspberry_Pi_PCR" scheme="http://yoursite.com/categories/Raspberry-Pi-PCR/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF&amp;%E5%A4%9A%E6%80%81/01-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF&amp;%E5%A4%9A%E6%80%81/01-%E7%AC%94%E8%AE%B0/</id>
    <published>2019-09-19T00:06:58.642Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h4 id="静态修饰符Static"><a href="#静态修饰符Static" class="headerlink" title="静态修饰符Static"></a>静态修饰符Static</h4><p>修饰的对象属于类的加载而加载（优先于对象加载），初始值为null，被所有对象共享。<br>在一开始随着类的加载而加载到方法区  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;h4 id=&quot;静态修饰符Static&quot;&gt;&lt;a href=&quot;#静态修饰符Static&quot; class=&quot;headerlink&quot; title=&quot;静态修
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="04-面向对象-继承&amp;多态" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%BB%A7%E6%89%BF-%E5%A4%9A%E6%80%81/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/03-IO%E6%B5%81/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/03-IO%E6%B5%81/</id>
    <published>2019-09-19T00:06:58.641Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>第10天 IO<br>今日内容介绍<br>    IO流概述及FileWriter类使用<br>    FileReader类使用<br>    缓冲流介绍和使用<br>    IO流相关案例<br>第1章    IO流概述及FileWriter类使用<br>1.1    IO流概述及分类<br> IO流用来处理设备之间的数据传输<br>   Java对数据的操作是通过流的方式<br>   Java用于操作流的类都在IO包中<br>      流按流向分为两种：输入流，输出流<br>    <img src="assets/3/20190208-f689a08a.png" alt="">  </p><p>1.2    FileWriter类使用<br>A:打开帮助文档<br>B:点击显示，找到索引，看到输入框<br>C:你要学习什么内容，你就在框框里面输入什么内容<br>      举例：Random<br>D:看包<br>java.lang包下的类在使用的时候是不需要导包的<br>E:看类的描述<br>    Random类是用于生成随机数的类<br>F:看构造方法<br>    Random():无参构造方法<br>        Random r = new Random();<br>G:看成员方法<br>       public int nextInt(int n):产生的是一个[0,n)范围内的随机数<br>        调用方法：<br>            看返回值类型：人家返回什么类型，你就用什么类型接收<br>            看方法名：名字不要写错了<br>            看形式参数：人家要几个参数，你就给几个，人家要什么数据类型的，你就给什么数据类型的<br>            int number = r.nextInt(100);<br>1.2.1    FileWriter向文件中写数据<br>A:FileWriter向文件中写数据操作步骤:<br>      a:使用FileWriter流关联文件<br>      b:利用FileWriter的写方法写数据<br>      c:利用FileWriter的刷新方法将数据从内存刷到硬盘上<br>      d:利用FileWriter的关流方法将释放占用的系统底层资源<br>   B:FileWriter方法:<br>构造方法<br>FileWriter(String fileName) 传入一个文件的路径<br>成员方法<br>void write(String str) 向文件中写str<br>void flush()  将内存中的数据刷新到文件中<br>void close()  关流释放系统底层资源</p><p>1.2.1.1    案例代码一:<br>package com.itheima_01;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>需求：往文件中写数据</p></li><li><p>写数据–输出流–FileWriter</p></li><li></li><li><p>FileWriter:</p></li><li><p>FileWriter(String fileName):传递一个文件名称</p></li><li></li><li><p>输出流写数据的步骤：</p></li><li><p>A:创建输出流对象</p></li><li><p>B:调用输出流对象的写数据的方法</p></li><li><p>C:释放资源</p></li><li><p>/<br>public class FileWriterDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输出流对象FileWriter fw = new FileWriter(&quot;d:\\a.txt&quot;);/* * 创建输出流对象做了哪些事情: *         A:调用系统资源创建了一个文件 *         B:创建输出流对象 *         C:把输出流对象指向文件 *///调用输出流对象的写数据的方法//写一个字符串数据fw.write(&quot;IO流你好&quot;);//数据没有直接写到文件，其实是写到了内存缓冲区fw.flush();//释放资源//通知系统释放和该文件相关的资源  即使没有flush，close也会检查缓冲区有没有字符并且输出缓冲区内容。fw.close();//while(true) {}</code></pre><p>  }<br>}</p></li></ul><p>1.2.2    FileWriter注意事项<br>1.2.2.1    案例代码二:<br>package com.itheima_01;</p><p>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>输出流写数据的步骤：</p></li><li><p>A:创建输出流对象</p></li><li><p>B:调用输出流对象的写数据方法，并刷新缓冲区</p></li><li><p>C:释放资源</p></li><li></li><li><p>相对路径：相对当前项目而言的，在项目的根目录下(a.txt)</p></li><li><p>绝对路径：以盘符开始的路径(d:\a.txt)</p></li><li></li><li><p>close()和flush()方法的区别：</p></li><li><p>flush():刷新缓冲区。流对象还可以继续使用。</p></li><li><p>close():先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。</p></li><li><p>/<br>public class FileWriterDemo2 {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输出流对象//FileWriter fw = new FileWriter(&quot;d:\\a.txt&quot;);FileWriter fw = new FileWriter(&quot;a.txt&quot;);//调用输出流对象的写数据方法，并刷新缓冲区fw.write(&quot;helloworld&quot;);fw.flush();fw.write(&quot;java&quot;);fw.flush();//释放资源fw.close();//Stream closed//fw.write(&quot;javaee&quot;);//fw.flush();</code></pre><p>  }<br>}</p></li></ul><p>1.2.3    FileWriter其它写方法<br>void write(String str):写一个字符串数据<br>void write(String str,int index,int len):写一个字符串中的一部分数据<br>void write(int ch):写一个字符数据,这里写int类型的好处是既可以写char类型的数据，也可以写char对应的int类型的值。’a’,97<br>void write(char[] chs):写一个字符数组数据<br>void write(char[] chs,int index,int len):写一个字符数组的一部分数据<br>1.2.3.1    案例代码三:<br>package com.itheima_01;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>void write(String str):写一个字符串数据</p></li><li><p>void write(String str,int index,int len):写一个字符串中的一部分数据</p></li><li><p>void write(int ch):写一个字符数据,这里写int类型的好处是既可以写char类型的数据，也可以写char对应的int类型的值。’a’,97</p></li><li><p>void write(char[] chs):写一个字符数组数据</p></li><li><p>void write(char[] chs,int index,int len):写一个字符数组的一部分数据</p></li><li><p>/<br>public class FileWriterDemo3 {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输出流对象FileWriter fw = new FileWriter(&quot;b.txt&quot;);//void write(String str):写一个字符串数据//fw.write(&quot;abcde&quot;);//void write(String str,int index,int len):写一个字符串中的一部分数据//fw.write(&quot;abcde&quot;,0,5);//fw.write(&quot;abcde&quot;,1,3);//void write(int ch):写一个字符数据,这里写int类型的好处是既可以写char类型的数据，也可以写char对应的int类型的值。&apos;a&apos;,97//fw.write(&apos;a&apos;);//fw.write(97);//void write(char[] chs):写一个字符数组数据char[] chs = {&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;};//fw.write(chs);//void write(char[] chs,int index,int len):写一个字符数组的一部分数据//fw.write(chs,0,5);fw.write(chs,2,3);//释放资源fw.close();</code></pre><p>  }<br>}</p></li></ul><p>1.2.4    FileWriter写入换行以及向文本末尾追加<br>1.2.4.1    案例代码四:<br>package com.itheima_01;</p><p>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>如何实现数据的换行?</p></li><li><p>\n可以实现换行，但是windows系统自带的记事本打开并没有换行，这是为什么呢?因为windows识别的换行不是\n，而是\r\n</p></li><li><p>windows:\r\n</p></li><li><p>linux:\n</p></li><li><p>mac:\r</p></li><li><p>如何实现数据的追加写入?</p></li><li><p>FileWriter(String fileName, boolean append)</p></li><li><p>/<br>public class FileWriterDemo4 {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输出流对象//FileWriter fw = new FileWriter(&quot;c.txt&quot;);FileWriter fw = new FileWriter(&quot;c.txt&quot;,true); //表示追加写入，默认是falsefor(int x=0; x&lt;10; x++) {    fw.write(&quot;hello&quot;+x);    fw.write(&quot;\r\n&quot;);}//释放资源fw.close();</code></pre><p>  }<br>}<br>     FileReader类使用<br>    FileReader类使用<br>第2章    FileReader类使用<br>2.1    FileReader读数据一次读取一个字符<br>2.1.1    案例代码五:<br>package com.itheima_02;<br>import java.io.FileReader;<br>import java.io.IOException;</p></li></ul><p>/*</p><ul><li><p>需求：从文件中读数据并显示到控制台</p></li><li><p>读数据–输入流–FileReader</p></li><li></li><li><p>FileReader:</p></li><li><p>FileReader(String fileName):传递文件名称</p></li><li></li><li><p>输入流读文件的步骤：</p></li><li><p>A:创建输入流对象</p></li><li><p>B:调用输入流对象的读数据方法</p></li><li><p>C:释放资源</p></li><li></li><li><p>java.io.FileNotFoundException: fr.txt (系统找不到指定的文件。)</p></li><li><p>/<br>public class FileReaderDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入流对象</code></pre><p>//        FileReader fr = new FileReader(“fr.txt”);</p><pre><code>FileReader fr = new FileReader(&quot;FileWriterDemo.java&quot;);//调用输入流对象的读数据方法//int read():一次读取一个字符/*//第一次读数据int ch = fr.read();System.out.println(ch);System.out.println((char)ch);//第二次读数据ch = fr.read();System.out.println(ch);System.out.println((char)ch);//第三次读数据ch = fr.read();System.out.println(ch);System.out.println((char)ch);//这是时候，我们发现代码的重复度很高，想用循环改进，但是不知道循环的结束条件是什么ch = fr.read();System.out.println(ch);ch = fr.read();System.out.println(ch);//通过测试，我们知道，如果读取数据的返回值是-1的时候，就说明没有数据了，这也是我们循环的结束条件*/int ch;//1:fr.read()//2:ch=fr.read()//3:ch != -1while((ch=fr.read())!=-1) {    //System.out.println(ch);    //System.out.println((char)ch);    System.out.print((char)ch);}//释放资源fr.close();</code></pre><p>  }<br>}<br>2.2    利用FileReader和FileWriter完成文件复制<br>2.2.1    读一次写一次</p></li></ul><p>2.2.1.1    案例代码六:<br>package com.itheima_03;<br>import java.io.FileReader;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>需求：</p></li><li><p>把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中</p></li><li></li><li><p>文件复制也是有规律可循的，也就是说有套路。</p></li><li></li><li><p>数据源：</p></li><li><p>FileWriterDemo.java – 读数据 – FileReader</p></li><li><p>目的地：</p></li><li><p>Copy.java – 写数据 – FileWriter</p></li><li><p>/<br>public class CopyFileDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入流对象FileReader fr = new FileReader(&quot;FileWriterDemo.java&quot;);//创建输出流对象FileWriter fw = new FileWriter(&quot;Copy.java&quot;);//读写数据int ch;while((ch=fr.read())!=-1) {    fw.write(ch);}//释放资源fw.close();fr.close();</code></pre><p>  }<br>}</p></li></ul><p>2.2.2    利用字符数组拷贝文件</p><p>2.2.2.1    案例代码七:<br>package com.itheima_03;</p><p>import java.io.FileReader;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>需求：</p></li><li><p>把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中</p></li><li></li><li><p>数据源：</p></li><li><p>FileWriterDemo.java – 读数据 – FileReader</p></li><li><p>目的地：</p></li><li><p>Copy.java – 写数据 – FileWriter</p></li><li><p>/<br>public class CopyFileDemo2 {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入流对象FileReader fr  = new FileReader(&quot;FileWriterDemo.java&quot;);//创建输出流对象FileWriter fw = new FileWriter(&quot;Copy.java&quot;);//读写数据char[] chs = new char[1024];int len;while((len=fr.read(chs))!=-1) {    fw.write(chs, 0, len);}//释放资源fw.close();fr.close();</code></pre><p>  }<br>}</p></li></ul><p>2.2.3    拷贝文件的两种方式图解<br><img src="assets/3/20190208-24a3d3db.png" alt="">  </p><p>第3章    缓冲流介绍和使用<br>3.1    缓冲流的基本使用<br>3.1.1    案例代码八:<br>package com.itheima_04;</p><p>import java.io.BufferedReader;<br>import java.io.FileReader;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>BufferedWriter:将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</p></li><li><p>BufferedReader:从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。</p></li><li><p>/<br>public class BufferedStreamDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输出缓冲流对象/*BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bw.txt&quot;));bw.write(&quot;hello&quot;);//bw.flush();bw.close();*///创建输入缓冲流对象BufferedReader br = new BufferedReader(new FileReader(&quot;FileWriterDemo.java&quot;));/*//一次读写一个字符int ch;while((ch=br.read())!=-1){    System.out.print((char)ch);}*///一次读写一个字符数组char[] chs = new char[1024];int len;while((len=br.read(chs))!=-1) {    System.out.print(new String(chs,0,len));}//释放资源br.close();</code></pre><p>  }<br>}</p></li></ul><p>3.2    缓冲流复制文本文件的两种方式<br>  利用缓冲流把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中<br>  第一种方式:使用缓冲流不使用字符数组<br>  第二种方式:使用缓冲流使用字符数组<br>3.2.1    案例代码九:<br>package com.itheima_04;</p><p>import java.io.BufferedReader;<br>import java.io.BufferedWriter;<br>import java.io.FileReader;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>需求：</p></li><li><p>把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中</p></li><li></li><li><p>数据源：</p></li><li><p>FileWriterDemo.java – 读数据 – FileReader – 高效的读数据 – BufferedReader</p></li><li><p>目的地：</p></li><li><p>Copy.java – 写数据 – FileWriter – 高效的写数据 – BufferedWriter</p></li><li><p>/<br>public class CopyFileDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入缓冲流对象BufferedReader br = new BufferedReader(new FileReader(&quot;FileWriterDemo.java&quot;));//创建输出缓冲流对象BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;Copy.java&quot;));//读写数据/*//一次读写一个字符int ch;while((ch=br.read())!=-1) {    bw.write(ch);}*/</code></pre></li></ul><p>//一次读写一个字符数组<br>        char[] chs = new char[1024];<br>        int len;<br>        while((len=br.read(chs))!=-1) {<br>            bw.write(chs,0,len);<br>        }</p><pre><code>    //释放资源    bw.close();    br.close();}</code></pre><p>}</p><p>3.3    缓冲流的特有方法使用<br> BufferedWriter<br>         void newLine():写一个换行符，这个换行符由系统决定,不同的操作系统newLine()方法使用的换行符不同<br>windows:\r\n<br>linux:\n<br>mac:\r<br> BufferedReader<br>         String readLine():一次读取一行数据，但是不读取换行符<br>3.3.1    案例代码十:<br>package com.itheima_05;<br>import java.io.BufferedReader;<br>import java.io.FileReader;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>缓冲流的特殊功能：</p></li><li><p>BufferedWriter</p></li><li><p>void newLine():写一个换行符，这个换行符由系统决定</p></li><li><p>BufferedReader</p></li><li><p>String readLine():一次读取一行数据，但是不读取换行符</p></li><li><p>/<br>public class BufferedStreamDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>/*BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;bw2.txt&quot;));for(int x=0; x&lt;10; x++) {    bw.write(&quot;hello&quot;+x);    //bw.write(&quot;\r\n&quot;);    bw.newLine();    bw.flush();}bw.close();*/BufferedReader br = new BufferedReader(new FileReader(&quot;br.txt&quot;));/*String line = br.readLine();System.out.println(line);line = br.readLine();System.out.println(line);line = br.readLine();System.out.println(line);line = br.readLine();System.out.println(line);*/String line;//1:br.readLine()//2:line=br.readLine()//3:line != nullwhile((line=br.readLine())!=null) {    System.out.println(line);}br.close();</code></pre><p>  }<br>}</p></li></ul><p>3.4    缓冲流的特有方法复制文件<br>3.4.1    案例代码十一:<br>package com.itheima_05;<br>import java.io.BufferedReader;<br>import java.io.BufferedWriter;<br>import java.io.FileReader;<br>import java.io.FileWriter;<br>import java.io.IOException;<br>/*</p><ul><li><p>需求：</p></li><li><p>把项目路径下的FileWriterDemo.java中的内容复制到项目路径下的Copy.java中</p></li><li></li><li><p>数据源：</p></li><li><p>FileWriterDemo.java – 读数据 – FileReader – 高效的读数据 – BufferedReader</p></li><li><p>目的地：</p></li><li><p>Copy.java – 写数据 – FileWriter – 高效的写数据 – BufferedWriter</p></li><li><p>/<br>public class CopyFileDemo {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入缓冲流对象BufferedReader br = new BufferedReader(new FileReader(&quot;FileWriterDemo.java&quot;));//创建输出缓冲流对象BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;Copy.java&quot;));//读写数据String line;while((line=br.readLine())!=null) {    bw.write(line);    bw.newLine();    bw.flush();}//释放资源bw.close();br.close();</code></pre><p>  }<br>}</p></li></ul><p>第4章    IO流相关案例<br>4.1    复制文本文件的5种方式<br>A:利用基本流一次读写一个字符<br>B:利用基本流一次读写一个字符数组<br>C:利用缓冲流一次读写一个字符<br>D:利用缓冲流一次读写一个字符数组<br>E:利用缓冲流的特有方法一次读写一个字符串<br>4.1.1    案例代码十二:<br>package com.itheima_06;</p><p>import java.io.BufferedReader;<br>import java.io.BufferedWriter;<br>import java.io.FileReader;<br>import java.io.FileWriter;<br>import java.io.IOException;</p><p>/*</p><ul><li><p>复制文本文件(5种方式)</p></li><li></li><li><p>数据源：</p></li><li><p>FileWriterDemo.java</p></li><li><p>目的地：</p></li><li><p>Copy.java</p></li><li><p>/<br>public class CopyFileTest {<br>  public static void main(String[] args) throws IOException {</p><pre><code>/*method1(&quot;FileWriterDemo.java&quot;,&quot;Copy.java&quot;);method2(&quot;FileWriterDemo.java&quot;,&quot;Copy.java&quot;);method3(&quot;FileWriterDemo.java&quot;,&quot;Copy.java&quot;);method4(&quot;FileWriterDemo.java&quot;,&quot;Copy.java&quot;);method5(&quot;FileWriterDemo.java&quot;,&quot;Copy.java&quot;);*/String srcFileName = &quot;FileWriterDemo.java&quot;;String destFileName = &quot;Copy.java&quot;;</code></pre></li></ul><p>//        method1(srcFileName,destFileName);<br>//        method2(srcFileName,destFileName);<br>        method3(srcFileName,destFileName);<br>//        method4(srcFileName,destFileName);<br>//        method5(srcFileName,destFileName);<br>    }</p><pre><code>//缓冲流一次读写一个字符串public static void method5(String srcFileName,String destFileName) throws IOException {    //创建输入缓冲流对象    BufferedReader br = new BufferedReader(new FileReader(srcFileName));    //创建输出缓冲流对象    BufferedWriter bw = new BufferedWriter(new FileWriter(destFileName));    //一次读写一个字符串    String line;    while((line=br.readLine())!=null){        bw.write(line);        bw.newLine();        bw.flush();    }    //释放资源    bw.close();    br.close();}//缓冲流一次读写一个字符数组public static void method4(String srcFileName,String destFileName) throws IOException {    //创建输入缓冲流对象    BufferedReader br = new BufferedReader(new FileReader(srcFileName));    //创建输出缓冲流对象    BufferedWriter bw = new BufferedWriter(new FileWriter(destFileName));    //一次读写一个字符数组    char[] chs = new char[1024];    int len;    while((len=br.read(chs))!=-1) {        bw.write(chs,0,len);    }    //释放资源    bw.close();    br.close();}//缓冲流一次读写一个字符public static void method3(String srcFileName,String destFileName) throws IOException {    //创建输入缓冲流对象    BufferedReader br = new BufferedReader(new FileReader(srcFileName));    //创建输出缓冲流对象    BufferedWriter bw = new BufferedWriter(new FileWriter(destFileName));    //一次读写一个字符    int ch;    while((ch=br.read())!=-1) {        bw.write(ch);    }    //释放资源    bw.close();    br.close();}//基本流一次读写一个字符数组public static void method2(String srcFileName,String destFileName) throws IOException {    //创建输入流对象    FileReader fr = new FileReader(srcFileName);    //创建输出流对象    FileWriter fw = new FileWriter(destFileName);    //一次读写一个字符数组    char[] chs = new char[1024];    int len;    while((len=fr.read(chs))!=-1) {        fw.write(chs,0,len);    }    //释放资源    fw.close();    fr.close();}//基本流一次读写一个字符public static void method1(String srcFileName,String destFileName) throws IOException {    //创建输入流对象    FileReader fr = new FileReader(srcFileName);    //创建输出流对象    FileWriter fw = new FileWriter(destFileName);    //一次读写一个字符    int ch;    while((ch=fr.read())!=-1) {        fw.write(ch);    }    //释放资源    fw.close();    fr.close();}</code></pre><p>}</p><p>4.2    把集合中的数据写到文本文件<br>把ArrayList集合中的字符串数据存储到文本文件项目根目下的array.txt中<br>每一个字符串元素作为文件中的一行数据<br>4.2.1    案例代码十三:<br>package com.itheima_06;</p><p>import java.io.BufferedWriter;<br>import java.io.FileWriter;<br>import java.io.IOException;<br>import java.util.ArrayList;</p><p>/*</p><ul><li><p>把ArrayList集合中的字符串数据存储到文本文件</p></li><li><p>每一个字符串元素作为文件中的一行数据</p></li><li></li><li><p>分析：</p></li><li><p>A:创建集合对象</p></li><li><p>B:往集合中添加字符串元素</p></li><li><p>C:创建输出缓冲流对象</p></li><li><p>D:遍历集合，得到每一个字符串元素，然后把该字符串元素作为数据写到文本文件</p></li><li><p>E:释放资源</p></li><li><p>/<br>public class ArrayListToFileTest {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建集合对象ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();//往集合中添加字符串元素array.add(&quot;hello&quot;);array.add(&quot;world&quot;);array.add(&quot;java&quot;);//创建输出缓冲流对象BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;array.txt&quot;));//遍历集合，得到每一个字符串元素，然后把该字符串元素作为数据写到文本文件for(int x=0; x&lt;array.size(); x++) {    String s = array.get(x);    bw.write(s);    bw.newLine();    bw.flush();}//释放资源bw.close();</code></pre><p>  }<br>}</p></li></ul><p>4.3    把文本文件中的数据读取到集合</p><p>从项目根目录下的array.txt文本文件中读取数据到ArrayList集合中，并遍历集合,每一行数据作为一个字符串元素<br>4.3.1    案例代码十四:<br>package com.itheima_06;<br>import java.io.BufferedReader;<br>import java.io.FileReader;<br>import java.io.IOException;<br>import java.util.ArrayList;</p><p>/*</p><ul><li><p>从文本文件中读取数据到ArrayList集合中，并遍历集合</p></li><li><p>每一行数据作为一个字符串元素</p></li><li></li><li><p>分析：</p></li><li><p>A:创建输入缓冲流对象</p></li><li><p>B:创建集合对象</p></li><li><p>C:读取数据，每次读取一行数据，把该行数据作为一个元素存储到集合中</p></li><li><p>D:释放资源</p></li><li><p>E:遍历集合</p></li><li><p>/<br>public class FileToArrayListTest {<br>  public static void main(String[] args) throws IOException {</p><pre><code>//创建输入缓冲流对象BufferedReader br = new  BufferedReader(new FileReader(&quot;array.txt&quot;));//创建集合对象ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();//读取数据，每次读取一行数据，把该行数据作为一个元素存储到集合中String line;while((line=br.readLine())!=null) {    array.add(line);}//释放资源br.close();//遍历集合for(int x=0; x&lt;array.size(); x++) {    String s = array.get(x);    System.out.println(s);}</code></pre><p>  }<br>}</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IO流&quot;&gt;&lt;a href=&quot;#IO流&quot; class=&quot;headerlink&quot; title=&quot;IO流&quot;&gt;&lt;/a&gt;IO流&lt;/h2&gt;&lt;p&gt;第10天 IO&lt;br&gt;今日内容介绍&lt;br&gt;    IO流概述及FileWriter类使用&lt;br&gt;    FileReader类使
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="03-常用API" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/02-%E9%9B%86%E5%90%88ArryList/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/02-%E9%9B%86%E5%90%88ArryList/</id>
    <published>2019-09-19T00:06:58.641Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合ArryList"><a href="#集合ArryList" class="headerlink" title="集合ArryList"></a>集合ArryList</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br></pre></td><td class="code"><pre><span class="line">第09天 java集合</span><br><span class="line">今日内容介绍</span><br><span class="line">对象数组</span><br><span class="line">集合类之ArrayList</span><br><span class="line">学生管理系统案例</span><br><span class="line">第1章对象数组</span><br><span class="line">1.1对象数组概述</span><br><span class="line"> A:基本类型的数组:存储的元素为基本类型</span><br><span class="line">int[] arr&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">B:对象数组:存储的元素为引用类型</span><br><span class="line">  Student[] stus&#x3D;new Student[3];</span><br><span class="line"></span><br><span class="line"> Student代表一个自定义类</span><br><span class="line">Stus数组中stus[0],stus[1],stus[2]的元素数据类型为Student,</span><br><span class="line">  都可以指向一个Student对象</span><br><span class="line">1.2对象数组案例:</span><br><span class="line"> 创建一个学生数组，存储三个学生对象并遍历</span><br><span class="line">1.2.1 案例代码一:</span><br><span class="line">  package com.itheima;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 自动生成构造方法：</span><br><span class="line"> * 代码区域右键 -- Source -- Generate Constructors from Superclass...无参构造方法</span><br><span class="line"> * 代码区域右键 -- Source -- Generate Constructor using Fields...带参构造方法</span><br><span class="line"> * 自动生成getXxx()&#x2F;setXxx():</span><br><span class="line"> * 代码区域右键 -- Source -- Generate Getters and Setters...</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(String name, int age) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.itheima;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 创建一个学生数组，存储三个学生对象并遍历</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:创建学生数组</span><br><span class="line"> * C:创建学生对象</span><br><span class="line"> * D:把学生对象作为元素赋值给学生数组</span><br><span class="line"> * E:遍历学生数组</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建学生数组</span><br><span class="line">Student[] students &#x3D; new Student[3];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建学生对象</span><br><span class="line">Student s1 &#x3D; new Student(&quot;曹操&quot;,40);</span><br><span class="line">Student s2 &#x3D; new Student(&quot;刘备&quot;,35);</span><br><span class="line">Student s3 &#x3D; new Student(&quot;孙权&quot;,30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素赋值给学生数组</span><br><span class="line">students[0] &#x3D; s1;</span><br><span class="line">students[1] &#x3D; s2;</span><br><span class="line">students[2] &#x3D; s3;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历学生数组</span><br><span class="line">for(int x&#x3D;0; x&lt;students.length; x++) &#123;</span><br><span class="line">Student s &#x3D; students[x];</span><br><span class="line">&#x2F;&#x2F;System.out.println(s);</span><br><span class="line">System.out.println(s.getName()+&quot;---&quot;+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1.3对象数组的内存图</span><br><span class="line">![](assets&#x2F;3&#x2F;20190208-e2398c7f.png)  </span><br><span class="line"></span><br><span class="line">第2章集合类之ArrayList</span><br><span class="line">2.1集合概述</span><br><span class="line">A:我们学习的是面向对象编程语言，而面向对象编程语言对事物的描述都是通过对象来体现的。</span><br><span class="line">    为了方便对多个对象进行操作，我们就必须对这多个对象进行存储，而要想对多个对象进行存储，就不能是一个基本的变量，而应该是一个容器类型的变量。</span><br><span class="line"></span><br><span class="line">B:到目前为止，我们学习过了哪些容器类型的数据呢？</span><br><span class="line">StringBuilder,数组。</span><br><span class="line"> StringBuilder的结果只能是一个字符串类型，不一定满足我们的需求。</span><br><span class="line"> 所以，我们目前只能选择数组了，也就是我们前面学习过的对象数组。</span><br><span class="line">         但是，数组的长度是固定的， 如果有时候元素的个数不确定的,我们无法定义出数组的长度,这个时候，java就提供了集合类供我们使用。</span><br><span class="line">2.2ArrayList集合</span><br><span class="line">2.2.1ArrayList添加新元素</span><br><span class="line">2.2.1.1案例代码二:</span><br><span class="line">package com.itheima_01;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 为什么会出现集合类：</span><br><span class="line"> * 我们学习的是面向对象编程语言，而面向对象编程语言对事物的描述都是通过对象来体现的。</span><br><span class="line"> * 为了方便对多个对象进行操作，我们就必须对这多个对象进行存储，而要想对多个对象进行存储，</span><br><span class="line"> * 就不能是一个基本的变量，而应该是一个容器类型的变量。</span><br><span class="line"> * 到目前为止，我们学习过了哪些容器类型的数据呢？StringBuilder,数组。</span><br><span class="line"> * StringBuilder的结果只能是一个字符串类型，不一定满足我们的需求。</span><br><span class="line"> * 所以，我们目前只能选择数组了，也就是我们前面学习过的对象数组。</span><br><span class="line"> * 但是，数组的长度是固定的，适应不了变化的需求，那么，我们该如何选择呢?</span><br><span class="line"> * 这个时候，java就提供了集合类供我们使用。</span><br><span class="line"> *</span><br><span class="line"> * 集合类的特点：</span><br><span class="line"> * 长度可变。</span><br><span class="line"> *</span><br><span class="line"> * ArrayList&lt;E&gt;:</span><br><span class="line"> * 大小可变数组的实现</span><br><span class="line"> *</span><br><span class="line"> * &lt;E&gt;:是一种特殊的数据类型，泛型。</span><br><span class="line"> * 怎么用呢?</span><br><span class="line"> * 在出现E的地方我们使用引用数据类型替换即可</span><br><span class="line"> * 举例：ArrayList&lt;String&gt;,ArrayList&lt;Student&gt;</span><br><span class="line"> *</span><br><span class="line"> * 构造方法：</span><br><span class="line"> * ArrayList()</span><br><span class="line"> *</span><br><span class="line"> * 添加元素：</span><br><span class="line"> * public boolean add(E e):添加元素</span><br><span class="line"> * public void add(int index,E element):在指定的索引处添加一个元素</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; array &#x3D; new  ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;add(E e):添加元素</span><br><span class="line">array.add(&quot;hello&quot;);</span><br><span class="line">array.add(&quot;world&quot;);</span><br><span class="line">array.add(&quot;java&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;add(int index,E element):在指定的索引处添加一个元素</span><br><span class="line">&#x2F;&#x2F;array.add(1, &quot;android&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;array:&quot;+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.2.2ArrayList删改查方法</span><br><span class="line">A:获取元素</span><br><span class="line">    public E get(int index):返回指定索引处的元素</span><br><span class="line">B:集合长度</span><br><span class="line">    public int size():返回集合中的元素的个数</span><br><span class="line">C:删除元素</span><br><span class="line">    public boolean remove(Object o):删除指定的元素，返回删除是否成功</span><br><span class="line">    public E remove(int index):删除指定索引处的元素，返回被删除的元素</span><br><span class="line">D:修改元素</span><br><span class="line">public E set(int index,E element):修改指定索引处的元素，返回被修改的元素</span><br><span class="line"></span><br><span class="line">2.2.2.1案例代码三:</span><br><span class="line">package com.itheima_01;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 获取元素</span><br><span class="line"> * public E get(int index):返回指定索引处的元素</span><br><span class="line"> * 集合长度</span><br><span class="line"> * public int size():返回集合中的元素的个数</span><br><span class="line"> * 删除元素</span><br><span class="line"> * public boolean remove(Object o):删除指定的元素，返回删除是否成功</span><br><span class="line"> * public E remove(int index):删除指定索引处的元素，返回被删除的元素</span><br><span class="line"> * 修改元素</span><br><span class="line"> * public E set(int index,E element):修改指定索引处的元素，返回被修改的元素</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; array &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加元素</span><br><span class="line">array.add(&quot;hello&quot;);</span><br><span class="line">array.add(&quot;world&quot;);</span><br><span class="line">array.add(&quot;java&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public E get(int index):返回指定索引处的元素</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;get:&quot;+array.get(0));</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;get:&quot;+array.get(1));</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;get:&quot;+array.get(2));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public int size():返回集合中的元素的个数</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;size:&quot;+array.size());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public boolean remove(Object o):删除指定的元素，返回删除是否成功</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;remove:&quot;+array.remove(&quot;world&quot;));&#x2F;&#x2F;true</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;remove:&quot;+array.remove(&quot;world&quot;));&#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public E remove(int index):删除指定索引处的元素，返回被删除的元素</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;remove:&quot;+array.remove(0));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public E set(int index,E element):修改指定索引处的元素，返回被修改的元素</span><br><span class="line">System.out.println(&quot;set:&quot;+array.set(1, &quot;android&quot;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">System.out.println(&quot;array:&quot;+array);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.2.3ArrayList遍历</span><br><span class="line">集合的遍历思想和数组的遍历思想相同</span><br><span class="line">循环遍历容器,依次取出里面的元素即可</span><br><span class="line">2.2.3.1案例代码四:</span><br><span class="line">package com.itheima_01;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * ArrayList集合的遍历</span><br><span class="line"> * 通过size()和get()配合实现的</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListDemo3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; array &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加元素</span><br><span class="line">array.add(&quot;hello&quot;);</span><br><span class="line">array.add(&quot;world&quot;);</span><br><span class="line">array.add(&quot;java&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取元素</span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(array.get(0));</span><br><span class="line">System.out.println(array.get(1));</span><br><span class="line">System.out.println(array.get(2));</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;0; x&lt;3; x++) &#123;</span><br><span class="line">System.out.println(array.get(x));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如何知道集合中元素的个数呢?size()</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">System.out.println(array.get(x));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最标准的用法</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">String s &#x3D; array.get(x);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.3ArrayList集合案例</span><br><span class="line">2.3.1ArrayList练习之存储字符串并遍历</span><br><span class="line">   向集合中添加任意四个字符串,遍历集合,依次打印取出的字符串</span><br><span class="line">2.3.1.1案例代码五:</span><br><span class="line">package com.itheima_02;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 存储字符串并遍历</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:创建集合对象</span><br><span class="line"> * B:添加字符串元素</span><br><span class="line"> * C:遍历集合</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; array &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加字符串元素</span><br><span class="line">array.add(&quot;向问天&quot;);</span><br><span class="line">array.add(&quot;刘正风&quot;);</span><br><span class="line">array.add(&quot;左冷禅&quot;);</span><br><span class="line">array.add(&quot;风清扬&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">String s &#x3D; array.get(x);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.3.2ArrayList练习之获取满足要求的元素</span><br><span class="line">     给定一个字符串数组：&#123;“张三丰”,“宋远桥”,“张无忌”,“殷梨亭”“张翠山”,“莫声谷”&#125;，将数组中的元素添加到集合中，并把所有姓张的人员打印到控制台上</span><br><span class="line">2.3.2.1案例代码六:</span><br><span class="line">package com.itheima_02;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 给定一个字符串数组：&#123;“张三丰”,“宋远桥”,“张无忌”,“殷梨亭”,“张翠山”,“莫声谷”&#125;，将数组中的元素添加到集合中，并把所有姓张的人员打印到控制台上。</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义字符串数组</span><br><span class="line"> * B:创建集合对象</span><br><span class="line"> * C:遍历字符串数组，获取到每一个字符串元素</span><br><span class="line"> * D:把获取到的字符串元素添加到集合</span><br><span class="line"> * E:遍历集合</span><br><span class="line"> * 要判断每一个字符串元素是否以&quot;张&quot;开头，如果是，就输出在控制台</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义字符串数组</span><br><span class="line">String[] strArray &#x3D; &#123;&quot;张三丰&quot;,&quot;宋远桥&quot;,&quot;张无忌&quot;,&quot;殷梨亭&quot;,&quot;张翠山&quot;,&quot;莫声谷&quot;&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;String&gt; array &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历字符串数组，获取到每一个字符串元素</span><br><span class="line">for(int x&#x3D;0; x&lt;strArray.length; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;把获取到的字符串元素添加到集合</span><br><span class="line">array.add(strArray[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">String s &#x3D; array.get(x);</span><br><span class="line">&#x2F;&#x2F;要判断每一个字符串元素是否以&quot;张&quot;开头，如果是，就输出在控制台</span><br><span class="line">if(s.startsWith(&quot;张&quot;)) &#123;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.3.3ArrayList练习之存储自定义对象并遍历</span><br><span class="line"> A:自定义一个学生类,学生中有姓名和年龄属性,生成满参构造与空参构造</span><br><span class="line">生成属性对应的getter&#x2F;setter方法</span><br><span class="line"></span><br><span class="line">B:在测试类中使用满参构造创建三个学生对象,然后将每个学生对象均添加到ArrayList集合中</span><br><span class="line"></span><br><span class="line">C:遍历这个ArrayList集合,依次打印出每个学生的姓名和年龄</span><br><span class="line">2.3.3.1案例代码七:</span><br><span class="line">package com.itheima_02;</span><br><span class="line">public class Student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public Student(String name, int age) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.itheima_02;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 存储自定义对象并遍历</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:创建集合对象</span><br><span class="line"> * C:创建学生对象</span><br><span class="line"> * D:把学生对象作为元素添加到集合中</span><br><span class="line"> * E:遍历集合</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ArrayListTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建学生对象</span><br><span class="line">Student s1 &#x3D; new Student(&quot;林青霞&quot;,28);</span><br><span class="line">Student s2 &#x3D; new Student(&quot;张曼玉&quot;,30);</span><br><span class="line">Student s3 &#x3D; new Student(&quot;景甜&quot;,25);</span><br><span class="line">Student s4 &#x3D; new Student(&quot;柳岩&quot;,18);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素添加到集合中</span><br><span class="line">array.add(s1);</span><br><span class="line">array.add(s2);</span><br><span class="line">array.add(s3);</span><br><span class="line">array.add(s4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">System.out.println(s.getName()+&quot;---&quot;+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.3.4ArrayList练习之键盘录入数据存储并遍历</span><br><span class="line">     创建一个Student类包含姓名和年龄属性</span><br><span class="line">创建一个ArrayList集合</span><br><span class="line">     向集合中添加三个Student对象Student对象中姓名和年龄的数据均来自与键盘录入</span><br><span class="line">     最终遍历这个集合,取出Student对象以及里面属性的值</span><br><span class="line">2.3.4.1案例代码八:</span><br><span class="line">package com.itheima_03;</span><br><span class="line"></span><br><span class="line">public class Student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String age;</span><br><span class="line">public Student() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public Student(String name, String age) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line">public String getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(String age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.itheima_03;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 创建一个集合，存储学生对象，学生对象的数据来自于键盘录入，最后，遍历集合</span><br><span class="line"> *</span><br><span class="line"> * 注意：为了方便使用，我把学生类中的所有成员定义为String类型</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:创建集合对象</span><br><span class="line"> * C:键盘录入数据,创建学生对象,把键盘录入的数据赋值给学生对象的成员变量</span><br><span class="line"> * D:把学生对象作为元素存储到集合中</span><br><span class="line"> * E:遍历集合</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;键盘录入数据,创建学生对象,把键盘录入的数据赋值给学生对象的成员变量</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入学生姓名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生年龄：&quot;);</span><br><span class="line">String age &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">Student s &#x3D; new Student();</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素存储到集合中</span><br><span class="line">array.add(s);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了提高代码的复用性，我把键盘录入数据给学生对象，并存储到集合中的动作用一个方法来实现</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">addStudent(array);</span><br><span class="line">addStudent(array);</span><br><span class="line">addStudent(array);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">System.out.println(s.getName()+&quot;---&quot;+s.getAge());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：void</span><br><span class="line"> * 参数列表：ArrayList&lt;Student&gt; array</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void addStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入数据,创建学生对象,把键盘录入的数据赋值给学生对象的成员变量</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入学生姓名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生年龄：&quot;);</span><br><span class="line">String age &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">Student s &#x3D; new Student();</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素存储到集合中</span><br><span class="line">array.add(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">第3章学生管理系统案例</span><br><span class="line">3.1学生管理系统案例需求</span><br><span class="line"></span><br><span class="line">      利用集合完成对学生的增删改查四个功能</span><br><span class="line">3.2学生管理系统案例实现</span><br><span class="line">3.2.1创建学生类:</span><br><span class="line">3.2.1.1案例代码九:</span><br><span class="line">package com.itheima;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Student &#123;</span><br><span class="line">&#x2F;&#x2F;学号</span><br><span class="line">private String id;</span><br><span class="line">&#x2F;&#x2F;姓名</span><br><span class="line">private String name;</span><br><span class="line">&#x2F;&#x2F;年龄</span><br><span class="line">private String age;</span><br><span class="line">&#x2F;&#x2F;居住地</span><br><span class="line">private String address;</span><br><span class="line"></span><br><span class="line">public Student() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Student(String id, String name, String age, String address) &#123;</span><br><span class="line">this.id &#x3D; id;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">this.address &#x3D; address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getId() &#123;</span><br><span class="line">return id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setId(String id) &#123;</span><br><span class="line">this.id &#x3D; id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name &#x3D; name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setAge(String age) &#123;</span><br><span class="line">this.age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getAddress() &#123;</span><br><span class="line">return address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setAddress(String address) &#123;</span><br><span class="line">this.address &#x3D; address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">3.2.2学生管理系统界面实现:</span><br><span class="line">3.2.2.1案例代码十:</span><br><span class="line">package com.itheima;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生管理系统的主类</span><br><span class="line"> *</span><br><span class="line"> * 步骤如下：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:学生管理系统的主界面的代码编写</span><br><span class="line"> * C:学生管理系统的查看所有学生的代码编写</span><br><span class="line"> * D:学生管理系统的添加学生的代码编写</span><br><span class="line"> * E:学生管理系统的删除学生的代码编写</span><br><span class="line"> * F:学生管理系统的修改学生的代码编写</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentManagerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; 创建集合对象，用于存储学生数据</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 为了让程序能够回到这里来，我们使用循环</span><br><span class="line">while (true) &#123;</span><br><span class="line">&#x2F;&#x2F; 这是学生管理系统的主界面</span><br><span class="line">System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);</span><br><span class="line">System.out.println(&quot;1 查看所有学生&quot;);</span><br><span class="line">System.out.println(&quot;2 添加学生&quot;);</span><br><span class="line">System.out.println(&quot;3 删除学生&quot;);</span><br><span class="line">System.out.println(&quot;4 修改学生&quot;);</span><br><span class="line">System.out.println(&quot;5 退出&quot;);</span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">&#x2F;&#x2F; 创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">String choiceString &#x3D; sc.nextLine();</span><br><span class="line">&#x2F;&#x2F; 用switch语句实现选择</span><br><span class="line">switch (choiceString) &#123;</span><br><span class="line">case &quot;1&quot;:</span><br><span class="line">&#x2F;&#x2F; 查看所有学生</span><br><span class="line">break;</span><br><span class="line">case &quot;2&quot;:</span><br><span class="line">&#x2F;&#x2F; 添加学生</span><br><span class="line">break;</span><br><span class="line">case &quot;3&quot;:</span><br><span class="line">&#x2F;&#x2F; 删除学生</span><br><span class="line">break;</span><br><span class="line">case &quot;4&quot;:</span><br><span class="line">&#x2F;&#x2F; 修改学生</span><br><span class="line">break;</span><br><span class="line">case &quot;5&quot;:</span><br><span class="line">&#x2F;&#x2F; 退出</span><br><span class="line">&#x2F;&#x2F; System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">&#x2F;&#x2F; break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">System.exit(0); &#x2F;&#x2F; JVM退出</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3.2.3学生管理系统之查询所有学生功能</span><br><span class="line">3.2.3.1案例代码十一:</span><br><span class="line">package com.itheima.test;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生管理系统的主类</span><br><span class="line"> *</span><br><span class="line"> * 步骤如下：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:学生管理系统的主界面的代码编写</span><br><span class="line"> * C:学生管理系统的查看所有学生的代码编写</span><br><span class="line"> * D:学生管理系统的添加学生的代码编写</span><br><span class="line"> * E:学生管理系统的删除学生的代码编写</span><br><span class="line"> * F:学生管理系统的修改学生的代码编写</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentManagerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象，用于存储学生数据</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让程序能够回到这里来，我们使用循环</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;这是学生管理系统的主界面</span><br><span class="line">System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);</span><br><span class="line">System.out.println(&quot;1 查看所有学生&quot;);</span><br><span class="line">System.out.println(&quot;2 添加学生&quot;);</span><br><span class="line">System.out.println(&quot;3 删除学生&quot;);</span><br><span class="line">System.out.println(&quot;4 修改学生&quot;);</span><br><span class="line">System.out.println(&quot;5 退出&quot;);</span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">String choiceString &#x3D; sc.nextLine();</span><br><span class="line">&#x2F;&#x2F;用switch语句实现选择</span><br><span class="line">switch(choiceString) &#123;</span><br><span class="line">case &quot;1&quot;:</span><br><span class="line">&#x2F;&#x2F;查看所有学生</span><br><span class="line">findAllStudent(array);</span><br><span class="line">break;</span><br><span class="line">case &quot;2&quot;:</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">break;</span><br><span class="line">case &quot;3&quot;:</span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">break;</span><br><span class="line">case &quot;4&quot;:</span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">break;</span><br><span class="line">case &quot;5&quot;:</span><br><span class="line">&#x2F;&#x2F;退出</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">System.exit(0); &#x2F;&#x2F;JVM退出</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;查看所有学生</span><br><span class="line">public static void findAllStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;首先来判断集合中是否有数据，如果没有数据，就给出提示，并让该方法不继续往下执行</span><br><span class="line">if(array.size() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">System.out.println(&quot;不好意思,目前没有学生信息可供查询,请回去重新选择你的操作&quot;);</span><br><span class="line">return;  &#x2F;&#x2F;return 并让该方法不继续往下执行，在这里停住</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;\t 其实就是一个tab键的位置</span><br><span class="line">System.out.println(&quot;学号\t\t姓名\t年龄\t居住地&quot;);</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">System.out.println(s.getId()+&quot;\t&quot;+s.getName()+&quot;\t&quot;+s.getAge()+&quot;\t&quot;+s.getAddress());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.2.4学生管理系统之添加学生功能</span><br><span class="line">3.2.4.1案例代码十二:</span><br><span class="line">package com.itheima;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生管理系统的主类</span><br><span class="line"> *</span><br><span class="line"> * 步骤如下：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:学生管理系统的主界面的代码编写</span><br><span class="line"> * C:学生管理系统的查看所有学生的代码编写</span><br><span class="line"> * D:学生管理系统的添加学生的代码编写</span><br><span class="line"> * E:学生管理系统的删除学生的代码编写</span><br><span class="line"> * F:学生管理系统的修改学生的代码编写</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentManagerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象，用于存储学生数据</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让程序能够回到这里来，我们使用循环</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;这是学生管理系统的主界面</span><br><span class="line">System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);</span><br><span class="line">System.out.println(&quot;1 查看所有学生&quot;);</span><br><span class="line">System.out.println(&quot;2 添加学生&quot;);</span><br><span class="line">System.out.println(&quot;3 删除学生&quot;);</span><br><span class="line">System.out.println(&quot;4 修改学生&quot;);</span><br><span class="line">System.out.println(&quot;5 退出&quot;);</span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">String choiceString &#x3D; sc.nextLine();</span><br><span class="line">&#x2F;&#x2F;用switch语句实现选择</span><br><span class="line">switch(choiceString) &#123;</span><br><span class="line">case &quot;1&quot;:</span><br><span class="line">&#x2F;&#x2F;查看所有学生</span><br><span class="line">break;</span><br><span class="line">case &quot;2&quot;:</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">addStudent(array);</span><br><span class="line">break;</span><br><span class="line">case &quot;3&quot;:</span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">break;</span><br><span class="line">case &quot;4&quot;:</span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">break;</span><br><span class="line">case &quot;5&quot;:</span><br><span class="line">&#x2F;&#x2F;退出</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">System.exit(0); &#x2F;&#x2F;JVM退出</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">public static void addStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入学生学号：&quot;);</span><br><span class="line">String id &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生姓名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生年龄：&quot;);</span><br><span class="line">String age &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生居住地：&quot;);</span><br><span class="line">String address &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建学生对象</span><br><span class="line">Student s &#x3D; new Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素添加到集合</span><br><span class="line">array.add(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给出提示</span><br><span class="line">System.out.println(&quot;添加学生成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">public static void addStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让id能够被访问到，我们就把id定义在了循环的外面</span><br><span class="line">String id;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让代码能够回到这里，用循环</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;请输入学生学号：&quot;);</span><br><span class="line">&#x2F;&#x2F;String id &#x3D; sc.nextLine();</span><br><span class="line">id &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断学号有没有被人占用</span><br><span class="line">&#x2F;&#x2F;定义标记</span><br><span class="line">boolean flag &#x3D; false;</span><br><span class="line">&#x2F;&#x2F;遍历集合，得到每一个学生</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">&#x2F;&#x2F;获取该学生的学号，和键盘录入的学号进行比较</span><br><span class="line">if(s.getId().equals(id)) &#123;</span><br><span class="line">flag &#x3D; true; &#x2F;&#x2F;说明学号被占用了</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(flag) &#123;</span><br><span class="line">System.out.println(&quot;你输入的学号已经被占用,请重新输入&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">break; &#x2F;&#x2F;结束循环</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(&quot;请输入学生姓名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生年龄：&quot;);</span><br><span class="line">String age &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生居住地：&quot;);</span><br><span class="line">String address &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建学生对象</span><br><span class="line">Student s &#x3D; new Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把学生对象作为元素添加到集合</span><br><span class="line">array.add(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给出提示</span><br><span class="line">System.out.println(&quot;添加学生成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.2.5学生管理系统之删除学生功能</span><br><span class="line">3.2.5.1案例代码十三:</span><br><span class="line">package com.itheima;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生管理系统的主类</span><br><span class="line"> *</span><br><span class="line"> * 步骤如下：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:学生管理系统的主界面的代码编写</span><br><span class="line"> * C:学生管理系统的查看所有学生的代码编写</span><br><span class="line"> * D:学生管理系统的添加学生的代码编写</span><br><span class="line"> * E:学生管理系统的删除学生的代码编写</span><br><span class="line"> * F:学生管理系统的修改学生的代码编写</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentManagerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象，用于存储学生数据</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让程序能够回到这里来，我们使用循环</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;这是学生管理系统的主界面</span><br><span class="line">System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);</span><br><span class="line">System.out.println(&quot;1 查看所有学生&quot;);</span><br><span class="line">System.out.println(&quot;2 添加学生&quot;);</span><br><span class="line">System.out.println(&quot;3 删除学生&quot;);</span><br><span class="line">System.out.println(&quot;4 修改学生&quot;);</span><br><span class="line">System.out.println(&quot;5 退出&quot;);</span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">String choiceString &#x3D; sc.nextLine();</span><br><span class="line">&#x2F;&#x2F;用switch语句实现选择</span><br><span class="line">switch(choiceString) &#123;</span><br><span class="line">case &quot;1&quot;:</span><br><span class="line">&#x2F;&#x2F;查看所有学生</span><br><span class="line">break;</span><br><span class="line">case &quot;2&quot;:</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">break;</span><br><span class="line">case &quot;3&quot;:</span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">deleteStudent(array);</span><br><span class="line">break;</span><br><span class="line">case &quot;4&quot;:</span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">break;</span><br><span class="line">case &quot;5&quot;:</span><br><span class="line">&#x2F;&#x2F;退出</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">System.exit(0); &#x2F;&#x2F;JVM退出</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">public static void deleteStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;删除学生的思路：键盘录入一个学号，到集合中去查找，看是否有学生使用的是该学号，如果有就删除该学生</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入你要删除的学生的学号：&quot;);</span><br><span class="line">String id &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">&#x2F;&#x2F;获取到每一个学生对象</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">&#x2F;&#x2F;拿这个学生对象的学号和键盘录入的学号进行比较</span><br><span class="line">if(s.getId().equals(id)) &#123;</span><br><span class="line">array.remove(x); &#x2F;&#x2F;根据索引删除</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给出提示</span><br><span class="line">System.out.println(&quot;删除学生成功&quot;);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;我们必须给出学号不存在的时候的提示</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个索引</span><br><span class="line">int index &#x3D; -1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">&#x2F;&#x2F;获取到每一个学生对象</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">&#x2F;&#x2F;拿这个学生对象的学号和键盘录入的学号进行比较</span><br><span class="line">if(s.getId().equals(id)) &#123;</span><br><span class="line">index &#x3D; x;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(index &#x3D;&#x3D; -1) &#123;</span><br><span class="line">System.out.println(&quot;不好意思,你要删除的学号对应的学生信息不存在,请回去重新你的选择&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">array.remove(index);</span><br><span class="line">System.out.println(&quot;删除学生成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.2.6学生管理系统之修改学生功能</span><br><span class="line">3.2.6.1案例代码十四:</span><br><span class="line">package com.itheima;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 这是我的学生管理系统的主类</span><br><span class="line"> *</span><br><span class="line"> * 步骤如下：</span><br><span class="line"> * A:定义学生类</span><br><span class="line"> * B:学生管理系统的主界面的代码编写</span><br><span class="line"> * C:学生管理系统的查看所有学生的代码编写</span><br><span class="line"> * D:学生管理系统的添加学生的代码编写</span><br><span class="line"> * E:学生管理系统的删除学生的代码编写</span><br><span class="line"> * F:学生管理系统的修改学生的代码编写</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StudentManagerTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建集合对象，用于存储学生数据</span><br><span class="line">ArrayList&lt;Student&gt; array &#x3D; new ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;为了让程序能够回到这里来，我们使用循环</span><br><span class="line">while(true) &#123;</span><br><span class="line">&#x2F;&#x2F;这是学生管理系统的主界面</span><br><span class="line">System.out.println(&quot;--------欢迎来到学生管理系统--------&quot;);</span><br><span class="line">System.out.println(&quot;1 查看所有学生&quot;);</span><br><span class="line">System.out.println(&quot;2 添加学生&quot;);</span><br><span class="line">System.out.println(&quot;3 删除学生&quot;);</span><br><span class="line">System.out.println(&quot;4 修改学生&quot;);</span><br><span class="line">System.out.println(&quot;5 退出&quot;);</span><br><span class="line">System.out.println(&quot;请输入你的选择：&quot;);</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">String choiceString &#x3D; sc.nextLine();</span><br><span class="line">&#x2F;&#x2F;用switch语句实现选择</span><br><span class="line">switch(choiceString) &#123;</span><br><span class="line">case &quot;1&quot;:</span><br><span class="line">&#x2F;&#x2F;查看所有学生</span><br><span class="line">break;</span><br><span class="line">case &quot;2&quot;:</span><br><span class="line">&#x2F;&#x2F;添加学生</span><br><span class="line">break;</span><br><span class="line">case &quot;3&quot;:</span><br><span class="line">&#x2F;&#x2F;删除学生</span><br><span class="line">break;</span><br><span class="line">case &quot;4&quot;:</span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">updateStudent(array);</span><br><span class="line">break;</span><br><span class="line">case &quot;5&quot;:</span><br><span class="line">&#x2F;&#x2F;退出</span><br><span class="line">&#x2F;&#x2F;System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">&#x2F;&#x2F;break; &#x2F;&#x2F;case穿透，输入5会继续往下执行</span><br><span class="line">default:</span><br><span class="line">System.out.println(&quot;谢谢你的使用&quot;);</span><br><span class="line">System.exit(0); &#x2F;&#x2F;JVM退出</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改学生</span><br><span class="line">public static void updateStudent(ArrayList&lt;Student&gt; array) &#123;</span><br><span class="line">&#x2F;&#x2F;修改学生的思路：键盘录入一个学号，到集合中去查找，看是否有学生使用的是该学号，如果有就修改该学生</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入你要修改的学生的学号：&quot;);</span><br><span class="line">String id &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义一个索引</span><br><span class="line">int index &#x3D; -1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历集合</span><br><span class="line">for(int x&#x3D;0; x&lt;array.size(); x++) &#123;</span><br><span class="line">&#x2F;&#x2F;获取每一个学生对象</span><br><span class="line">Student s &#x3D; array.get(x);</span><br><span class="line">&#x2F;&#x2F;拿学生对象的学号和键盘录入的学号进行比较</span><br><span class="line">if(s.getId().equals(id)) &#123;</span><br><span class="line">index &#x3D; x;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(index &#x3D;&#x3D; -1) &#123;</span><br><span class="line">System.out.println(&quot;不好意思,你要修改的学号对应的学生信息不存在,请回去重新你的选择&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;请输入学生新姓名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生新年龄：&quot;);</span><br><span class="line">String age &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入学生新居住地：&quot;);</span><br><span class="line">String address &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建学生对象</span><br><span class="line">Student s &#x3D; new Student();</span><br><span class="line">s.setId(id);</span><br><span class="line">s.setName(name);</span><br><span class="line">s.setAge(age);</span><br><span class="line">s.setAddress(address);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改集合中的学生对象</span><br><span class="line">array.set(index, s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给出提示</span><br><span class="line">System.out.println(&quot;修改学生成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;集合ArryList&quot;&gt;&lt;a href=&quot;#集合ArryList&quot; class=&quot;headerlink&quot; title=&quot;集合ArryList&quot;&gt;&lt;/a&gt;集合ArryList&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="03-常用API" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/01-API-StringBuilder/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/01-API-StringBuilder/</id>
    <published>2019-09-19T00:06:58.640Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="API-StringBuilder"><a href="#API-StringBuilder" class="headerlink" title="API-StringBuilder"></a>API-StringBuilder</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br></pre></td><td class="code"><pre><span class="line">今日内容介绍</span><br><span class="line">API概述</span><br><span class="line">Scanner类与String类</span><br><span class="line">StringBuilder类</span><br><span class="line">第1章API概述</span><br><span class="line">1.1API概念</span><br><span class="line">API(Application Programming Interface) : 应用程序编程接口</span><br><span class="line">编写一个机器人程序去控制机器人踢足球，程序就需要向机器人发出向前跑、向后跑、射门、抢球等各种命令，没有编过程序的人很难想象这样的程序如何编写。但是对于有经验的开发人员来说，知道机器人厂商一定会提供一些用于控制机器人的Java类，这些类中定义好了操作机器人各种动作的方法。其实，这些Java类就是机器人厂商提供给应用程序编程的接口，大家把这些类称为API。本章涉及的Java API指的就是JDK中提供的各种功能的Java类</span><br><span class="line">1.2快速使用API步骤:</span><br><span class="line">A:打开帮助文档</span><br><span class="line">B:点击显示，找到索引，看到输入框</span><br><span class="line">C:你要学习什么内容，你就在框框里面输入什么内容</span><br><span class="line">  举例：Random</span><br><span class="line">D:看包</span><br><span class="line">java.lang包下的类在使用的时候是不需要导包的</span><br><span class="line">E:看类的描述</span><br><span class="line">Random类是用于生成随机数的类</span><br><span class="line">F:看构造方法</span><br><span class="line">Random():无参构造方法</span><br><span class="line">Random r &#x3D; new Random();</span><br><span class="line">G:看成员方法</span><br><span class="line">   public int nextInt(int n):产生的是一个[0,n)范围内的随机数</span><br><span class="line">调用方法：</span><br><span class="line">看返回值类型：人家返回什么类型，你就用什么类型接收</span><br><span class="line">看方法名：名字不要写错了</span><br><span class="line">看形式参数：人家要几个参数，你就给几个，人家要什么数据类型的，你就给什么数据类型的</span><br><span class="line">int number &#x3D; r.nextInt(100);</span><br><span class="line">第2章Scanner类 与 String类</span><br><span class="line">2.1Scanner类</span><br><span class="line">2.1.1Scanner类作用</span><br><span class="line">  用Scanner类的方法可以完成接收键盘录入的数据</span><br><span class="line">2.1.2Scanner类接受键盘录入的字符串</span><br><span class="line">2.1.2.1案例代码一:</span><br><span class="line">package com.itheima_01;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * Scanner:用于获取键盘录入的数据。(基本数据类型，字符串数据)</span><br><span class="line"> * public String nextLine():获取键盘录入的字符串数据</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ScannerDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建键盘录入对象</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">&#x2F;&#x2F;接收数据</span><br><span class="line">System.out.println(&quot;请输入一个字符串数据：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;s:&quot;+s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2String类</span><br><span class="line">2.2.1String类概述</span><br><span class="line">通过JDK提供的API，查看String类的说明</span><br><span class="line">A:&quot;abc&quot;是String类的一个实例,或者成为String类的一个对象</span><br><span class="line">B:字符串字面值&quot;abc&quot;也可以看成是一个字符串对象</span><br><span class="line">C:字符串是常量，一旦被赋值，就不能被改变</span><br><span class="line">D:字符串本质是一个字符数组</span><br><span class="line">2.2.2String类的构造方法</span><br><span class="line">String(String original):把字符串数据封装成字符串对象</span><br><span class="line"> String(char[] value):把字符数组的数据封装成字符串对象</span><br><span class="line"> String(char[] value, int index, int count):把字符数组中的一部分数据封装成字符串对象</span><br><span class="line">2.2.2.1常用构造方法演示</span><br><span class="line">2.2.2.1.1案例代码二:</span><br><span class="line">package com.itheima_02;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * String:字符串类</span><br><span class="line"> * 由多个字符组成的一串数据</span><br><span class="line"> * 字符串其本质是一个字符数组</span><br><span class="line"> *</span><br><span class="line"> * 构造方法：</span><br><span class="line"> * String(String original):把字符串数据封装成字符串对象</span><br><span class="line"> * String(char[] value):把字符数组的数据封装成字符串对象</span><br><span class="line"> * String(char[] value, int index, int count):把字符数组中的一部分数据封装成字符串对象</span><br><span class="line"> *</span><br><span class="line"> * 注意：字符串是一种比较特殊的引用数据类型，直接输出字符串对象输出的是该对象中的数据。</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;方式1</span><br><span class="line">&#x2F;&#x2F;String(String original):把字符串数据封装成字符串对象</span><br><span class="line">String s1 &#x3D; new String(&quot;hello&quot;);</span><br><span class="line">System.out.println(&quot;s1:&quot;+s1);</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式2</span><br><span class="line">&#x2F;&#x2F;String(char[] value):把字符数组的数据封装成字符串对象</span><br><span class="line">char[] chs &#x3D; &#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;;</span><br><span class="line">String s2 &#x3D; new String(chs);</span><br><span class="line">System.out.println(&quot;s2:&quot;+s2);</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式3</span><br><span class="line">&#x2F;&#x2F;String(char[] value, int index, int count):把字符数组中的一部分数据封装成字符串对象</span><br><span class="line">&#x2F;&#x2F;String s3 &#x3D; new String(chs,0,chs.length);</span><br><span class="line">String s3 &#x3D; new String(chs,1,3);</span><br><span class="line">System.out.println(&quot;s3:&quot;+s3);</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方式4</span><br><span class="line">String s4 &#x3D; &quot;hello&quot;;</span><br><span class="line">System.out.println(&quot;s4:&quot;+s4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.2.2创建字符串对象两种方式的区别</span><br><span class="line">2.2.2.2.1案例代码三:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.itheima_02;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 通过构造方法创建的字符串对象和直接赋值方式创建的字符串对象有什么区别呢?</span><br><span class="line"> * 通过构造方法创建字符串对象是在堆内存。</span><br><span class="line"> * 直接赋值方式创建对象是在方法区的常量池。</span><br><span class="line"> * </span><br><span class="line"> * &#x3D;&#x3D;:</span><br><span class="line"> * 基本数据类型：比较的是基本数据类型的值是否相同</span><br><span class="line"> * 引用数据类型：比较的是引用数据类型的地址值是否相同</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String s1 &#x3D; new String(&quot;hello&quot;);</span><br><span class="line">String s2 &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;s1:&quot;+s1);</span><br><span class="line">System.out.println(&quot;s2:&quot;+s2);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;s1&#x3D;&#x3D;s2:&quot;+(s1&#x3D;&#x3D;s2)); &#x2F;&#x2F;false</span><br><span class="line"></span><br><span class="line">String s3 &#x3D; &quot;hello&quot;;</span><br><span class="line">System.out.println(&quot;s1&#x3D;&#x3D;s3:&quot;+(s1&#x3D;&#x3D;s3)); &#x2F;&#x2F;false</span><br><span class="line">System.out.println(&quot;s2&#x3D;&#x3D;s3:&quot;+(s2&#x3D;&#x3D;s3)); &#x2F;&#x2F;true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.3String类的判断功能</span><br><span class="line">boolean equals(Object obj):比较字符串的内容是否相同</span><br><span class="line">  boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span><br><span class="line">  boolean startsWith(String str):判断字符串对象是否以指定的str开头</span><br><span class="line">  boolean endsWith(String str):判断字符串对象是否以指定的str结尾</span><br><span class="line">2.2.3.1判断方法演示</span><br><span class="line">2.2.3.1.1案例代码四:</span><br><span class="line">package com.itheima_03;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * Object:是类层次结构中的根类，所有的类都直接或者间接的继承自该类。</span><br><span class="line"> * 如果一个方法的形式参数是Object，那么这里我们就可以传递它的任意的子类对象。</span><br><span class="line"> *</span><br><span class="line"> * String类的判断功能：</span><br><span class="line"> * boolean equals(Object obj):比较字符串的内容是否相同</span><br><span class="line"> * boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span><br><span class="line"> * boolean startsWith(String str):判断字符串对象是否以指定的str开头</span><br><span class="line"> * boolean endsWith(String str):判断字符串对象是否以指定的str结尾</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建字符串对象</span><br><span class="line">String s1 &#x3D; &quot;hello&quot;;</span><br><span class="line">String s2 &#x3D; &quot;hello&quot;;</span><br><span class="line">String s3 &#x3D; &quot;Hello&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean equals(Object obj):比较字符串的内容是否相同</span><br><span class="line">System.out.println(s1.equals(s2));</span><br><span class="line">System.out.println(s1.equals(s3));</span><br><span class="line">System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s2));</span><br><span class="line">System.out.println(s1.equalsIgnoreCase(s3));</span><br><span class="line">System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;boolean startsWith(String str):判断字符串对象是否以指定的str开头</span><br><span class="line">System.out.println(s1.startsWith(&quot;he&quot;));</span><br><span class="line">System.out.println(s1.startsWith(&quot;ll&quot;));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.3.2判断功能案例</span><br><span class="line">需求:模拟登录,给三次机会,并提示还有几次</span><br><span class="line">2.2.3.2.1案例代码五:</span><br><span class="line">package com.itheima_03;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 模拟登录,给三次机会,并提示还有几次。</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义两个字符串对象，用于存储已经存在的用户名和密码</span><br><span class="line"> * B:键盘录入用户名和密码</span><br><span class="line"> * C:拿键盘录入的用户名和密码和已经存在的用户名和密码进行比较</span><br><span class="line"> * 如果内容相同，提示登录成功</span><br><span class="line"> * 如果内容不同，提示登录失败，并提示还有几次机会</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义两个字符串对象，用于存储已经存在的用户名和密码</span><br><span class="line">String username &#x3D; &quot;admin&quot;;</span><br><span class="line">String password &#x3D; &quot;admin&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;给三次机会，用for循环实现</span><br><span class="line">for(int x&#x3D;0; x&lt;3; x++) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入用户名和密码</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入用户名：&quot;);</span><br><span class="line">String name &#x3D; sc.nextLine();</span><br><span class="line">System.out.println(&quot;请输入密码：&quot;);</span><br><span class="line">String pwd &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拿键盘录入的用户名和密码和已经存在的用户名和密码进行比较</span><br><span class="line">if(username.equals(name) &amp;&amp; password.equals(pwd)) &#123;</span><br><span class="line">System.out.println(&quot;登录成功&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">if((2-x) &#x3D;&#x3D;0) &#123;</span><br><span class="line">System.out.println(&quot;用户名和密码被锁定,请与管理员联系&quot;);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;登录失败,你还有&quot;+(2-x)+&quot;次机会&quot;); &#x2F;&#x2F;2,1,0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.4String类的获取功能</span><br><span class="line">2.2.4.1获取方法演示</span><br><span class="line">package com.itheima_04;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * String类的获取功能：</span><br><span class="line"> * int length():获取字符串的长度，其实也就是字符个数</span><br><span class="line"> * char charAt(int index):获取指定索引处的字符</span><br><span class="line"> * int indexOf(String str):获取str在字符串对象中第一次出现的索引</span><br><span class="line"> * String substring(int start):从start开始截取字符串</span><br><span class="line"> * String substring(int start,int end):从start开始，到end结束截取字符串。包括start，不包括end</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建字符串对象</span><br><span class="line">String s &#x3D; &quot;helloworld&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int length():获取字符串的长度，其实也就是字符个数</span><br><span class="line">System.out.println(s.length());</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;char charAt(int index):获取指定索引处的字符</span><br><span class="line">System.out.println(s.charAt(0));</span><br><span class="line">System.out.println(s.charAt(1));</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;int indexOf(String str):获取str在字符串对象中第一次出现的索引</span><br><span class="line">System.out.println(s.indexOf(&quot;l&quot;));</span><br><span class="line">System.out.println(s.indexOf(&quot;owo&quot;));</span><br><span class="line">System.out.println(s.indexOf(&quot;ak&quot;));</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;String substring(int start):从start开始截取字符串</span><br><span class="line">System.out.println(s.substring(0));</span><br><span class="line">System.out.println(s.substring(5));</span><br><span class="line">System.out.println(&quot;--------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;String substring(int start,int end):从start开始，到end结束截取字符串</span><br><span class="line">System.out.println(s.substring(0, s.length()));</span><br><span class="line">System.out.println(s.substring(3,8));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.4.2获取功能案例</span><br><span class="line">2.2.4.2.1 案例代码六:</span><br><span class="line">package com.itheima_04;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 遍历字符串(获取字符串中的每一个字符)</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建一个字符串对象</span><br><span class="line">String s &#x3D; &quot;abcde&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;原始做法</span><br><span class="line">System.out.println(s.charAt(0));</span><br><span class="line">System.out.println(s.charAt(1));</span><br><span class="line">System.out.println(s.charAt(2));</span><br><span class="line">System.out.println(s.charAt(3));</span><br><span class="line">System.out.println(s.charAt(4));</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用for循环改进</span><br><span class="line">for(int x&#x3D;0; x&lt;5; x++) &#123;</span><br><span class="line">System.out.println(s.charAt(x));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;---------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;用length()方法获取字符串的长度</span><br><span class="line">for(int x&#x3D;0; x&lt;s.length(); x++) &#123;</span><br><span class="line">System.out.println(s.charAt(x));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.4.2.2 案例代码七:</span><br><span class="line">package com.itheima_04;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 统计一个字符串中大写字母字符，小写字母字符，数字字符出现的次数。(不考虑其他字符)</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:键盘录入一个字符串数据</span><br><span class="line"> * B:定义三个统计变量，初始化值都是0</span><br><span class="line"> * C:遍历字符串，得到每一个字符</span><br><span class="line"> * D:拿字符进行判断</span><br><span class="line"> * 假如ch是一个字符。</span><br><span class="line"> * 大写：ch&gt;&#x3D;&#39;A&#39; &amp;&amp; ch&lt;&#x3D;&#39;Z&#39;</span><br><span class="line"> * 小写：ch&gt;&#x3D;&#39;a&#39; &amp;&amp; ch&lt;&#x3D;&#39;z&#39;</span><br><span class="line"> * 数字：ch&gt;&#x3D;&#39;0&#39; &amp;&amp; ch&lt;&#x3D;&#39;9&#39;</span><br><span class="line"> * E:输出结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入一个字符串数据</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个字符串数据：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;定义三个统计变量，初始化值都是0</span><br><span class="line">int bigCount &#x3D; 0;</span><br><span class="line">int smallCount &#x3D; 0;</span><br><span class="line">int numberCount &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历字符串，得到每一个字符</span><br><span class="line">for(int x&#x3D;0; x&lt;s.length(); x++) &#123;</span><br><span class="line">char ch &#x3D; s.charAt(x);</span><br><span class="line">&#x2F;&#x2F;拿字符进行判断</span><br><span class="line">if(ch&gt;&#x3D;&#39;A&#39; &amp;&amp; ch&lt;&#x3D;&#39;Z&#39;) &#123;</span><br><span class="line">bigCount++;</span><br><span class="line">&#125;else if(ch&gt;&#x3D;&#39;a&#39; &amp;&amp; ch&lt;&#x3D;&#39;z&#39;) &#123;</span><br><span class="line">smallCount++;</span><br><span class="line">&#125;else if(ch&gt;&#x3D;&#39;0&#39; &amp;&amp; ch&lt;&#x3D;&#39;9&#39;) &#123;</span><br><span class="line">numberCount++;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">System.out.println(&quot;该字符&quot;+ch+&quot;非法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;大写字符：&quot;+bigCount+&quot;个&quot;);</span><br><span class="line">System.out.println(&quot;小写字符：&quot;+smallCount+&quot;个&quot;);</span><br><span class="line">System.out.println(&quot;数字字符：&quot;+numberCount+&quot;个&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.5String类的转换功能</span><br><span class="line">2.2.5.1转换方法演示</span><br><span class="line">char[] toCharArray():把字符串转换为字符数组</span><br><span class="line">String toLowerCase():把字符串转换为小写字符串</span><br><span class="line">String toUpperCase():把字符串转换为大写字符串</span><br><span class="line">2.2.5.1.1 案例代码八:</span><br><span class="line">package com.itheima_05;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * String类的转换功能：</span><br><span class="line"> * char[] toCharArray():把字符串转换为字符数组</span><br><span class="line"> * String toLowerCase():把字符串转换为小写字符串</span><br><span class="line"> * String toUpperCase():把字符串转换为大写字符串</span><br><span class="line"> *</span><br><span class="line"> * 字符串的遍历：</span><br><span class="line"> * A:length()加上charAt()</span><br><span class="line"> * B:把字符串转换为字符数组，然后遍历数组</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建字符串对象</span><br><span class="line">String s &#x3D; &quot;abcde&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;char[] toCharArray():把字符串转换为字符数组</span><br><span class="line">char[] chs &#x3D; s.toCharArray();</span><br><span class="line">for(int x&#x3D;0; x&lt;chs.length; x++) &#123;</span><br><span class="line">System.out.println(chs[x]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-----------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;String toLowerCase():把字符串转换为小写字符串</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;.toLowerCase());</span><br><span class="line">&#x2F;&#x2F;String toUpperCase():把字符串转换为大写字符串</span><br><span class="line">System.out.println(&quot;HelloWorld&quot;.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.5.2转换功能案例</span><br><span class="line">2.2.5.2.1 案例代码九:</span><br><span class="line">package com.itheima_05;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 键盘录入一个字符串，把该字符串的首字母转成大写，其余为小写。(只考虑英文大小写字母字符)</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:键盘录入一个字符串</span><br><span class="line"> * B:截取首字母</span><br><span class="line"> * C:截取除了首字母以外的字符串</span><br><span class="line"> * D:B转大写+C转小写</span><br><span class="line"> * E:输出即可</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入一个字符串</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;截取首字母</span><br><span class="line">String s1 &#x3D; s.substring(0, 1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;截取除了首字母以外的字符串</span><br><span class="line">String s2 &#x3D; s.substring(1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;B转大写+C转小写</span><br><span class="line">String s3 &#x3D; s1.toUpperCase()+s2.toLowerCase();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出即可</span><br><span class="line">System.out.println(&quot;s3:&quot;+s3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.6String类的其它功能</span><br><span class="line">2.2.6.1其它方法演示</span><br><span class="line">2.2.6.1.1 案例代码十:</span><br><span class="line">package com.itheima_06;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 去除字符串两端空格</span><br><span class="line"> *String trim()</span><br><span class="line"> * 按照指定符号分割字符串</span><br><span class="line"> *String[] split(String str)</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建字符串对象</span><br><span class="line">String s1 &#x3D; &quot;helloworld&quot;;</span><br><span class="line">String s2 &#x3D; &quot;  helloworld  &quot;;</span><br><span class="line">String s3 &#x3D; &quot;  hello  world  &quot;;</span><br><span class="line">System.out.println(&quot;---&quot;+s1+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;---&quot;+s1.trim()+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;---&quot;+s2+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;---&quot;+s2.trim()+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;---&quot;+s3+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;---&quot;+s3.trim()+&quot;---&quot;);</span><br><span class="line">System.out.println(&quot;-------------------&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;String[] split(String str)</span><br><span class="line">&#x2F;&#x2F;创建字符串对象</span><br><span class="line">String s4 &#x3D; &quot;aa,bb,cc&quot;;</span><br><span class="line">String[] strArray &#x3D; s4.split(&quot;,&quot;);</span><br><span class="line">for(int x&#x3D;0; x&lt;strArray.length; x++) &#123;</span><br><span class="line">System.out.println(strArray[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.7String类的其它案例</span><br><span class="line">2.2.7.1 案例代码十一:</span><br><span class="line">package com.itheima_07;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 把数组中的数据按照指定个格式拼接成一个字符串</span><br><span class="line"> * 举例：int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"> * 输出结果：[1, 2, 3]</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:定义一个int类型的数组</span><br><span class="line"> * B:写方法实现把数组中的元素按照指定的格式拼接成一个字符串</span><br><span class="line"> * C:调用方法</span><br><span class="line"> * D:输出结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个int类型的数组</span><br><span class="line">int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写方法实现把数组中的元素按照指定的格式拼接成一个字符串</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">String s &#x3D; arrayToString(arr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;s:&quot;+s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：String</span><br><span class="line"> * 参数列表：int[] arr</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String arrayToString(int[] arr) &#123;</span><br><span class="line">String s &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;[1, 2, 3]</span><br><span class="line">s +&#x3D; &quot;[&quot;;</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(x&#x3D;&#x3D;arr.length-1) &#123;</span><br><span class="line">s +&#x3D; arr[x];</span><br><span class="line">&#125;else &#123;</span><br><span class="line">s +&#x3D; arr[x];</span><br><span class="line">s +&#x3D; &quot;, &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s +&#x3D; &quot;]&quot;;</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">2.2.7.2 案例代码十二:</span><br><span class="line">package com.itheima_07;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 字符串反转</span><br><span class="line"> * 举例：键盘录入”abc”</span><br><span class="line"> * 输出结果：”cba”</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:键盘录入一个字符串</span><br><span class="line"> * B:写方法实现字符串的反转</span><br><span class="line"> * a:把字符串倒着遍历，得到的每一个字符拼接成字符串。</span><br><span class="line"> * b:把字符串转换为字符数组，然后对字符数组进行反转，最后在把字符数组转换为字符串</span><br><span class="line"> * C:调用方法</span><br><span class="line"> * D:输出结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入一个字符串</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写方法实现字符串的反转</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">String result &#x3D; reverse(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;result:&quot;+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 把字符串倒着遍历，得到的每一个字符拼接成字符串。</span><br><span class="line"> *</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：String</span><br><span class="line"> * 参数列表：String s</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">public static String reverse(String s) &#123;</span><br><span class="line">String ss &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">for(int x&#x3D;s.length()-1; x&gt;&#x3D;0; x--) &#123;</span><br><span class="line">ss +&#x3D; s.charAt(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ss;</span><br><span class="line">&#125;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;把字符串转换为字符数组，然后对字符数组进行反转，最后在把字符数组转换为字符串</span><br><span class="line">public static String reverse(String s) &#123;</span><br><span class="line">&#x2F;&#x2F;把字符串转换为字符数组</span><br><span class="line">char[] chs &#x3D; s.toCharArray();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对字符数组进行反转</span><br><span class="line">for(int start&#x3D;0,end&#x3D;chs.length-1; start&lt;&#x3D;end; start++,end--) &#123;</span><br><span class="line">char temp &#x3D; chs[start];</span><br><span class="line">chs[start] &#x3D; chs[end];</span><br><span class="line">chs[end] &#x3D; temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;最后在把字符数组转换为字符串</span><br><span class="line">String ss &#x3D; new String(chs);</span><br><span class="line">return ss;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">第3章StringBuilder类</span><br><span class="line">3.1StringBuilder类概述</span><br><span class="line"> StringBuilder:是一个可变的字符串。字符串缓冲区类。  </span><br><span class="line">String和StringBuilder的区别：</span><br><span class="line">String的内容是固定的</span><br><span class="line">StringBuilder的内容是可变的</span><br><span class="line">3.1.1+&#x3D;拼接字符串耗费内存原因:</span><br><span class="line">每次拼接都会产生新的字符串对象,而利用StringBuilder来拼接字符串自始至终用的都是同一个StringBuilder容器</span><br><span class="line"></span><br><span class="line">3.2StringBuilder类的常用方法</span><br><span class="line">  A:构造方法:</span><br><span class="line">     StringBuilder()</span><br><span class="line">  B:成员方法:</span><br><span class="line">     public int capacity():返回当前容量 (理论值)</span><br><span class="line">     public int length():返回长度(已经存储的字符个数)</span><br><span class="line">public StringBuilder append(任意类型):添加数据，并返回自身对象</span><br><span class="line">public StringBuilder reverse():反转功能</span><br><span class="line">3.2.1案例代码十三:</span><br><span class="line">package com.itheima_01;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * StringBuilder:是一个可变的字符串。字符串缓冲区类。</span><br><span class="line"> *</span><br><span class="line"> * String和StringBuilder的区别：</span><br><span class="line"> * String的内容是固定的。</span><br><span class="line"> * StringBuilder的内容是可变的。</span><br><span class="line"> *</span><br><span class="line"> * 构造方法：</span><br><span class="line"> * StringBuilder()</span><br><span class="line"> *</span><br><span class="line"> * 成员方法：</span><br><span class="line"> * public int capacity():返回当前容量</span><br><span class="line"> * public int length():返回长度（字符数）</span><br><span class="line"> *</span><br><span class="line"> * 容量：理论值</span><br><span class="line"> * 长度：实际值</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建对象</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">System.out.println(&quot;sb:&quot;+sb);</span><br><span class="line">System.out.println(&quot;sb.capacity():&quot;+sb.capacity());</span><br><span class="line">System.out.println(&quot;sb.length():&quot;+sb.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3.2.2案例代码十四:</span><br><span class="line">package com.itheima_02;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 添加功能</span><br><span class="line"> *public StringBuilder append(任意类型):添加数据，并返回自身对象</span><br><span class="line"> * 反转功能</span><br><span class="line"> *public StringBuilder reverse()</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;创建对象</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public StringBuilder append(任意类型)</span><br><span class="line">&#x2F;&#x2F;StringBuilder sb2 &#x3D; sb.append(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">System.out.println(&quot;sb:&quot;+sb);</span><br><span class="line">System.out.println(&quot;sb2:&quot;+sb2);</span><br><span class="line">System.out.println(sb &#x3D;&#x3D; sb2); &#x2F;&#x2F;true</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">sb.append(&quot;hello&quot;);</span><br><span class="line">sb.append(&quot;world&quot;);</span><br><span class="line">sb.append(true);</span><br><span class="line">sb.append(100);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;链式编程</span><br><span class="line">sb.append(&quot;hello&quot;).append(&quot;world&quot;).append(true).append(100);</span><br><span class="line"></span><br><span class="line">System.out.println(&quot;sb:&quot;+sb);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;public StringBuilder reverse()</span><br><span class="line">sb.reverse();</span><br><span class="line">System.out.println(&quot;sb:&quot;+sb);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3.3StringBuilder案例</span><br><span class="line">3.3.1案例一需求:</span><br><span class="line">StringBuilder和String通过方法完成相互转换</span><br><span class="line">3.3.1.1案例代码十五:</span><br><span class="line">package com.itheima_03;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * StringBuilder和String的相互转换</span><br><span class="line"> *</span><br><span class="line"> * StringBuilder -- String</span><br><span class="line"> * public String toString():通过toString()就可以实现把StringBuilder转成String</span><br><span class="line"> *</span><br><span class="line"> * String -- StringBuilder</span><br><span class="line"> * StringBuilder(String str):通过构造方法就可以实现把String转成StringBuilder</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderTest &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;StringBuilder -- String</span><br><span class="line">&#x2F;*</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">sb.append(&quot;hello&quot;).append(&quot;world&quot;);</span><br><span class="line"></span><br><span class="line">String s &#x3D; sb.toString();</span><br><span class="line">System.out.println(s);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;String -- StringBuilder</span><br><span class="line">String s &#x3D; &quot;helloworld&quot;;</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder(s);</span><br><span class="line">System.out.println(sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3.3.2案例二需求:</span><br><span class="line">利用StringBuilder把数组拼接成一个字符串</span><br><span class="line">   举例：</span><br><span class="line">  int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line">   结果：</span><br><span class="line">   [1, 2, 3]</span><br><span class="line">3.3.2.1案例代码十六:</span><br><span class="line">package com.itheima_03;</span><br><span class="line">&#x2F;*</span><br><span class="line"> * 把数组拼接成一个字符串</span><br><span class="line"> * 举例：</span><br><span class="line"> * int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"> * 结果：</span><br><span class="line"> * [1, 2, 3]</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderTest2 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;定义一个数组</span><br><span class="line">int[] arr &#x3D; &#123;1,2,3&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写方法实现拼接</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">String s &#x3D; arrayToString(arr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;s:&quot;+s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：String</span><br><span class="line"> * 参数列表：int[] arr</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String arrayToString(int[] arr) &#123;</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">&#x2F;&#x2F;[1, 2, 3]</span><br><span class="line">sb.append(&quot;[&quot;);</span><br><span class="line">for(int x&#x3D;0; x&lt;arr.length; x++) &#123;</span><br><span class="line">if(x&#x3D;&#x3D;arr.length-1) &#123;</span><br><span class="line">sb.append(arr[x]);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">sb.append(arr[x]).append(&quot;, &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(&quot;]&quot;);</span><br><span class="line"></span><br><span class="line">String result &#x3D; sb.toString();</span><br><span class="line"></span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3.3.3案例三需求:</span><br><span class="line">  利用StringBuilder完成字符串反转</span><br><span class="line">3.3.3.1案例代码十七:</span><br><span class="line">package com.itheima_03;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 把字符串反转</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:键盘录入一个字符串</span><br><span class="line"> * B:写方法实现反转</span><br><span class="line"> * String -- StringBuilder -- reverse() -- String</span><br><span class="line"> * C:调用方法</span><br><span class="line"> * D:输出结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderTest3 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入一个字符串</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写方法实现反转</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">String result &#x3D; myReverse(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;result:&quot;+result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：String</span><br><span class="line"> * 参数列表：String</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static String myReverse(String s) &#123;</span><br><span class="line">&#x2F;&#x2F;String -- StringBuilder -- reverse() -- String</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder(s);</span><br><span class="line">sb.reverse();</span><br><span class="line">String result &#x3D; sb.toString();</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">3.3.4案例四需求:</span><br><span class="line">  判断一个字符串是否是对称字符串</span><br><span class="line"> 例如&quot;abc&quot;不是对称字符串，&quot;aba&quot;、&quot;abba&quot;、&quot;aaa&quot;、&quot;mnanm&quot;是对称字符串</span><br><span class="line">3.3.4.1案例代码十八:</span><br><span class="line">package com.itheima_03;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 判断一个字符串是否是对称字符串</span><br><span class="line"> * 例如&quot;abc&quot;不是对称字符串，&quot;aba&quot;、&quot;abba&quot;、&quot;aaa&quot;、&quot;mnanm&quot;是对称字符串</span><br><span class="line"> *</span><br><span class="line"> * 分析：</span><br><span class="line"> * A:键盘录入一个字符串</span><br><span class="line"> * B:写方法实现判断一个字符串是否是对称字符串</span><br><span class="line"> * 把字符串反转，和反转前的字符串进行比较，如果内容相同，就说明是对称字符串</span><br><span class="line"> * C:调用方法</span><br><span class="line"> * D:输出结果</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class StringBuilderTest4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F;键盘录入一个字符串</span><br><span class="line">Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入一个字符串：&quot;);</span><br><span class="line">String s &#x3D; sc.nextLine();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;写方法实现判断一个字符串是否是对称字符串</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调用方法</span><br><span class="line">boolean b &#x3D; isSymmetry(s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">System.out.println(&quot;b:&quot;+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * 两个明确：</span><br><span class="line"> * 返回值类型：boolean</span><br><span class="line"> * 参数列表：String s</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static boolean isSymmetry(String s) &#123;</span><br><span class="line">&#x2F;&#x2F;把字符串反转，和反转前的字符串进行比较，如果内容相同，就说明是对称字符串</span><br><span class="line">StringBuilder sb &#x3D; new StringBuilder(s);</span><br><span class="line">sb.reverse();</span><br><span class="line">String result &#x3D; sb.toString();</span><br><span class="line"></span><br><span class="line">return result.equals(s);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;API-StringBuilder&quot;&gt;&lt;a href=&quot;#API-StringBuilder&quot; class=&quot;headerlink&quot; title=&quot;API-StringBuilder&quot;&gt;&lt;/a&gt;API-StringBuilder&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="03-常用API" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03-%E5%B8%B8%E7%94%A8API/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/10-%E7%B1%BB%E5%90%8D%E4%BD%9C%E4%B8%BA%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/10-%E7%B1%BB%E5%90%8D%E4%BD%9C%E4%B8%BA%E5%BD%A2%E5%BC%8F%E5%8F%82%E6%95%B0%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC/</id>
    <published>2019-09-19T00:06:58.638Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类名作为形式参数和返回值"><a href="#类名作为形式参数和返回值" class="headerlink" title="类名作为形式参数和返回值"></a>类名作为形式参数和返回值</h2><p>package com.itheima_10;  </p><p>public class Student {<br>    public void study() {<br>        System.out.println(“好好学习,天天向上”);<br>    }<br>}  </p><p>package com.itheima_10;  </p><p>public class Teacher {<br>    public void test(Student s) {<br>        s.study();<br>    }<br>}  </p><p>package com.itheima_10;  </p><p>//需求： 调用Teacher的test方法  </p><p>//类名作为形式参数：其实这里需要的是该类对象。<br>public class Test {<br>    public static void main(String[] args) {<br>        Teacher t = new Teacher();<br>        Student s = new Student();<br>        t.test(s);<br>    }<br>}  </p><p>package com.itheima_11;  </p><p>public class Teacher {  </p><pre><code>public Student getStudent() {      Student s = new Student();      return s;  }  </code></pre><p>}  </p><p>package com.itheima_11;  </p><p>//需求： 通过Teacher得到Student对象，然后调用Student类的方法<br>//如果方法的返回值是类名：其实返回的是该类的对象<br>public class Test {<br>    public static void main(String[] args) {<br>        Teacher t = new Teacher();<br>        Student s = t.getStudent();<br>        s.study();<br>    }<br>}  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类名作为形式参数和返回值&quot;&gt;&lt;a href=&quot;#类名作为形式参数和返回值&quot; class=&quot;headerlink&quot; title=&quot;类名作为形式参数和返回值&quot;&gt;&lt;/a&gt;类名作为形式参数和返回值&lt;/h2&gt;&lt;p&gt;package com.itheima_10;  &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="02-2.面向对象-封装" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/09-%E6%A0%87%E5%87%86%E7%B1%BB%E5%86%99%E6%B3%95%E5%92%8C%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/09-%E6%A0%87%E5%87%86%E7%B1%BB%E5%86%99%E6%B3%95%E5%92%8C%E6%B5%8B%E8%AF%95/</id>
    <published>2019-09-19T00:06:58.636Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标准类写法和测试"><a href="#标准类写法和测试" class="headerlink" title="标准类写法和测试"></a>标准类写法和测试</h2><p>package com.itheima_09;<br>/*  </p><ul><li><p>学生类  </p></li><li><p>/<br>public class Student {<br>  //成员变量<br>  private String name;<br>  private int age;  </p><p>  //构造方法<br>  public Student() {}  </p><p>  public Student(String name,int age) {  </p><pre><code>this.name = name;  this.age = age;  </code></pre><p>  }  </p><p>  //成员方法<br>  public void setName(String name) {  </p><pre><code>this.name = name;  </code></pre><p>  }  </p><p>  public String getName() {  </p><pre><code>return name;  </code></pre><p>  }  </p><p>  public void setAge(int age) {  </p><pre><code>this.age = age;  </code></pre><p>  }  </p><p>  public int getAge() {  </p><pre><code>return age;  </code></pre><p>  }<br>}  </p></li></ul><p>package com.itheima_09;<br>/*  </p><ul><li><p>学生类的测试类  </p></li><li><p>/<br>public class StudentDemo {<br>  public static void main(String[] args) {  </p><pre><code>//无参+setXxx()  Student s = new  Student();  s.setName(&quot;林青霞&quot;);  s.setAge(28);  System.out.println(s.getName()+&quot;---&quot;+s.getAge());  //带参构造  Student s2 = new Student(&quot;林青霞&quot;,28);  System.out.println(s2.getName()+&quot;---&quot;+s2.getAge());  </code></pre><p>  }<br>}  </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标准类写法和测试&quot;&gt;&lt;a href=&quot;#标准类写法和测试&quot; class=&quot;headerlink&quot; title=&quot;标准类写法和测试&quot;&gt;&lt;/a&gt;标准类写法和测试&lt;/h2&gt;&lt;p&gt;package com.itheima_09;&lt;br&gt;/*  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="02-2.面向对象-封装" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/08-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/08-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</id>
    <published>2019-09-19T00:06:58.635Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>package com.itheima_08;<br>/*  </p><ul><li><p>构造方法：  </p></li><li><p>给对象的数据进行初始化  </p></li><li></li><li><p>格式：  </p></li><li><p>方法名和类名相同  </p></li><li><p>没有返回值类型，连void都不能写  </p></li><li><p>没有具体的返回值  </p></li><li></li><li><p>构造方法的注意事项：  </p></li><li><p>A:如果我们没有给出构造方法，系统将会提供一个默认的无参构造方法供我们使用。  </p></li><li><p>B:如果我们给出了构造方法，系统将不在提供默认的无参构造方法供我们使用。  </p></li><li><p>这个时候，如果我们想使用无参构造方法，就必须自己提供。  </p></li><li><p>推荐：自己给无参构造方法  </p></li><li><p>C:构造方法也是可以重载的  </p></li><li></li><li><p>成员变量赋值：  </p></li><li><p>A:setXxx()方法  </p></li><li><p>B:带参构造方法  </p></li><li><p>/<br>public class Student {<br>  private String name;<br>  private int age;  </p><p>  /*<br>  public Student() {  </p><pre><code>System.out.println(&quot;这是构造方法&quot;);  </code></pre><p>  }<br>  */  </p><p>  public Student() {}  </p><p>  public Student(String name) {  </p><pre><code>this.name = name;  </code></pre><p>  }  </p><p>  public Student(int age) {  </p><pre><code>this.age = age;  </code></pre><p>  }  </p><p>  public Student(String name,int age) {  </p><pre><code>this.name = name;  this.age = age;  </code></pre><p>  }  </p><p>  public void show() {  </p><pre><code>System.out.println(name+&quot;---&quot;+age);  </code></pre><p>  }<br>}  </p></li></ul><p>package com.itheima_08;  </p><p>public class StudentDemo {<br>    public static void main(String[] args) {<br>        //如何调用构造方法呢?<br>        //通过new关键字调用<br>        //格式：类名 对象名 = new 构造方法(…);<br>        Student s = new Student();<br>        s.show();  </p><pre><code>    //public Student(String name)      Student s2 = new Student(&quot;林青霞&quot;);      s2.show();      //public Student(int age)      Student s3 = new Student(28);      s3.show();      //public Student(String name,int age)      Student s4 = new Student(&quot;林青霞&quot;,28);      s4.show();  }  </code></pre><p>}  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h2&gt;&lt;p&gt;package com.itheima_08;&lt;br&gt;/*  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;构造方法：  &lt;/p&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="02-2.面向对象-封装" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/07-this%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/07-this%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2019-09-19T00:06:58.635Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>package com.itheima_07;<br>/*  </p><ul><li><p>学生类  </p></li><li></li><li><p>起名字我们要求做到见名知意。  </p></li><li><p>而我们现在的代码中的n和a就没有做到见名知意，所以我要改进。  </p></li><li></li><li><p>如果有局部变量名和成员变量名相同，在局部使用的时候，采用的是就近的原则。  </p></li><li></li><li><p>我们有没有办法把局部变量的name赋值给成员变量的name呢?  </p></li><li><p>有。  </p></li><li></li><li><p>什么办法呢?  </p></li><li><p>用this关键字就可以解决这个问题  </p></li><li></li><li><p>this:代表所在类的对象引用  </p></li><li><p>方法被哪个对象调用，this就代表那个对象  </p></li><li></li><li><p>使用场景：  </p></li><li><p>局部变量隐藏成员变量  </p></li><li><p>/<br>public class Student {<br>  private String name;<br>  private int age;  </p><p>  public void setName(String name) { //“林青霞”  </p><pre><code>//name = name;  this.name = name;  </code></pre><p>  }  </p><p>  public String getName() {  </p><pre><code>return name;  </code></pre><p>  }  </p><p>  public void setAge(int age) {  </p><pre><code>//age = age;  this.age = age;  </code></pre><p>  }  </p><p>  public int getAge() {  </p><pre><code>return age;  </code></pre><p>  }<br>}  </p></li></ul><p>package com.itheima_07;<br>/*  </p><ul><li><p>学生类的测试类  </p></li><li><p>/<br>public class StudentDemo {<br>  public static void main(String[] args) {  </p><pre><code>//创建对象  Student s = new Student();  System.out.println(s.getName()+&quot;---&quot;+s.getAge());  s.setName(&quot;林青霞&quot;);  s.setAge(28);  System.out.println(s.getName()+&quot;---&quot;+s.getAge());  </code></pre><p>  }<br>}  </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this关键字&quot;&gt;&lt;a href=&quot;#this关键字&quot; class=&quot;headerlink&quot; title=&quot;this关键字&quot;&gt;&lt;/a&gt;this关键字&lt;/h2&gt;&lt;p&gt;package com.itheima_07;&lt;br&gt;/*  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;学生
      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="02-2.面向对象-封装" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/06-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%A7%81%E6%9C%89%E7%9A%84%E6%A0%87%E5%87%86%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/wiki/Note%20Collections/JavaEE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/06-%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%A7%81%E6%9C%89%E7%9A%84%E6%A0%87%E5%87%86%E4%BB%A3%E7%A0%81/</id>
    <published>2019-09-19T00:06:58.634Z</published>
    <updated>2019-09-19T00:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成员变量私有标准代码"><a href="#成员变量私有标准代码" class="headerlink" title="成员变量私有标准代码"></a>成员变量私有标准代码</h2><p>package com.itheima_06;<br>/*    </p><ul><li><p>学生类    </p></li><li><p>/<br>public class Student {<br>  private String name;<br>  private int age;    </p><p>  public void setName(String n) {    </p><pre><code>name = n;    </code></pre><p>  }    </p><p>  public String getName() {    </p><pre><code>return name;    </code></pre><p>  }    </p><p>  public void setAge(int a) {    </p><pre><code>age = a;    </code></pre><p>  }    </p><p>  public int getAge() {    </p><pre><code>return age;    </code></pre><p>  }<br>}    </p></li></ul><p>package com.itheima_06;<br>/*    </p><ul><li><p>学生类的测试类    </p></li><li><p>/<br>public class StudentDemo {<br>  public static void main(String[] args) {    </p><pre><code>//创建对象    Student s = new Student();    System.out.println(s.getName()+&quot;---&quot;+s.getAge());    s.setName(&quot;林青霞&quot;);    s.setAge(28);    System.out.println(s.getName()+&quot;---&quot;+s.getAge());    </code></pre><p>  }<br>}    </p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;成员变量私有标准代码&quot;&gt;&lt;a href=&quot;#成员变量私有标准代码&quot; class=&quot;headerlink&quot; title=&quot;成员变量私有标准代码&quot;&gt;&lt;/a&gt;成员变量私有标准代码&lt;/h2&gt;&lt;p&gt;package com.itheima_06;&lt;br&gt;/*    &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Note Collections" scheme="http://yoursite.com/categories/Note-Collections/"/>
    
      <category term="JavaEE 学习笔记" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="02-2.面向对象-封装" scheme="http://yoursite.com/categories/Note-Collections/JavaEE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02-2-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E5%B0%81%E8%A3%85/"/>
    
    
  </entry>
  
</feed>
